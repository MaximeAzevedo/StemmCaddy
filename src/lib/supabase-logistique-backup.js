import { supabase } from './supabase';

/**
 * ========================================
 * API LOGISTIQUE SUPABASE
 * ========================================
 * 
 * API sp√©cialis√©e pour la gestion de l'√©quipe logistique
 * Utilise les nouvelles tables : employes_logistique_new, vehicules_logistique, etc.
 */

export const supabaseLogistique = {
  
  // ==================== EMPLOY√âS LOGISTIQUE ====================
  
  /**
   * R√©cup√©rer tous les employ√©s logistique ACTIFS
   */
  async getEmployeesLogistique() {
    try {
      console.log('üìä getEmployeesLogistique - Chargement employ√©s logistique...');
      
      const { data, error } = await supabase
        .from('employes_logistique_new')
        .select('*')
        .eq('actif', true)
        .order('nom');
      
      if (error) {
        console.error('‚ùå Erreur getEmployeesLogistique:', error);
        throw error;
      }

      console.log('‚úÖ Employ√©s logistique charg√©s:', data?.length || 0);
      return { data: data || [], error: null };
      
    } catch (error) {
      console.error('üí• Erreur critique getEmployeesLogistique:', error);
      return { data: [], error };
    }
  },

  /**
   * Mettre √† jour un employ√© logistique
   */
  async updateEmployeeLogistique(id, updates) {
    try {
      const { data, error } = await supabase
        .from('employes_logistique_new')
        .update(updates)
        .eq('id', id)
        .select();
      
      if (error) throw error;
      
      console.log('‚úÖ Employ√© logistique mis √† jour:', data);
      return { data, error: null };
      
    } catch (error) {
      console.error('‚ùå Erreur updateEmployeeLogistique:', error);
      return { data: null, error };
    }
  },

  /**
   * Supprimer un employ√© logistique (avec v√©rifications s√©curit√©)
   */
  async deleteEmployeeLogistique(employeeId, forceDelete = false) {
    try {
      console.log('üóëÔ∏è Suppression employ√© logistique ID:', employeeId, 'Force:', forceDelete);

      // 1. V√©rifier si l'employ√© a des plannings futurs
      console.log('üîç V√©rification plannings futurs...');
      const today = new Date().toISOString().split('T')[0];
      const { data: futurePlanning, error: planningError } = await supabase
        .from('planning_logistique_new')
        .select('date')
        .eq('employee_id', employeeId)
        .gte('date', today);

      if (planningError) {
        console.error('‚ùå Erreur v√©rification planning futur:', planningError);
        return { data: null, error: planningError };
      }

      console.log('üîç Plannings futurs trouv√©s:', futurePlanning?.length || 0);
      if (futurePlanning && futurePlanning.length > 0 && !forceDelete) {
        const futureDates = futurePlanning.map(p => p.date).sort();
        console.log('‚ùå Suppression bloqu√©e - plannings futurs:', futureDates);
        return { 
          data: null, 
          error: { 
            message: `Impossible de supprimer : l'employ√© a ${futurePlanning.length} affectation(s) future(s) (√† partir du ${futureDates[0]})`,
            code: 'FUTURE_ASSIGNMENTS_EXIST',
            details: futureDates
          }
        };
      }

      if (futurePlanning && futurePlanning.length > 0 && forceDelete) {
        console.log('‚ö° Suppression forc√©e activ√©e - suppression de', futurePlanning.length, 'plannings futurs');
      }

      // 2. Supprimer les comp√©tences v√©hicules
      console.log('üóëÔ∏è Suppression comp√©tences v√©hicules...');
      const { error: competencesError } = await supabase
        .from('competences_vehicules')
        .delete()
        .eq('employee_id', employeeId);

      if (competencesError) {
        console.error('‚ùå Erreur suppression comp√©tences:', competencesError);
        return { data: null, error: competencesError };
      }
      console.log('‚úÖ Comp√©tences supprim√©es');

      // 3. Supprimer les absences existantes
      console.log('üóëÔ∏è Suppression absences...');
      const { error: absencesError } = await supabase
        .from('absences_logistique_new')
        .delete()
        .eq('employee_id', employeeId);

      if (absencesError) {
        console.error('‚ùå Erreur suppression absences:', absencesError);
        return { data: null, error: absencesError };
      }
      console.log('‚úÖ Absences supprim√©es');

      // 4. Supprimer TOUS les plannings (pass√©s ET futurs si forceDelete)
      console.log('üóëÔ∏è Suppression plannings (tous)...');
      const { error: planningDeleteError } = await supabase
        .from('planning_logistique_new')
        .delete()
        .eq('employee_id', employeeId);

      if (planningDeleteError) {
        console.error('‚ùå Erreur suppression plannings:', planningDeleteError);
        return { data: null, error: planningDeleteError };
      }
      console.log('‚úÖ Plannings supprim√©s');

      // 5. Supprimer l'employ√©
      console.log('üóëÔ∏è Suppression employ√© principal...');
      const { data, error } = await supabase
        .from('employes_logistique_new')
        .delete()
        .eq('id', employeeId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erreur suppression employ√©:', error);
        return { data: null, error };
      }

      if (forceDelete && futurePlanning && futurePlanning.length > 0) {
        console.log('‚úÖ Employ√© logistique supprim√© avec suppression forc√©e:', data, '- Plannings futurs supprim√©s:', futurePlanning.length);
      } else {
        console.log('‚úÖ Employ√© logistique supprim√© avec succ√®s:', data);
      }
      
      return { 
        data, 
        error: null,
        deletedFuturePlanning: forceDelete ? futurePlanning?.length || 0 : 0
      };

    } catch (error) {
      console.error('üí• Erreur critique suppression employ√©:', error);
      return { data: null, error };
    }
  },

  /**
   * Cr√©er un nouvel employ√© logistique
   */
  async createEmployeeLogistique(employeeData) {
    try {
      console.log('‚ûï Cr√©ation nouvel employ√© logistique:', employeeData);

      // 1. V√©rifier si le nom existe d√©j√†
      const { data: existingEmployee, error: checkError } = await supabase
        .from('employes_logistique_new')
        .select('id, nom')
        .ilike('nom', employeeData.nom.trim())
        .single();

      if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = pas trouv√©, OK
        console.error('‚ùå Erreur v√©rification nom existant:', checkError);
        return { data: null, error: checkError };
      }

      if (existingEmployee) {
        return { 
          data: null, 
          error: { 
            message: `Un employ√© nomm√© "${existingEmployee.nom}" existe d√©j√†`,
            code: 'EMPLOYEE_NAME_EXISTS'
          }
        };
      }

      // 2. Cr√©er l'employ√©
      const { data: newEmployee, error: createError } = await supabase
        .from('employes_logistique_new')
        .insert([{
          nom: employeeData.nom.trim(),
          profil: employeeData.profil || 'Moyen',
          permis: employeeData.permis || false,
          langues: employeeData.langues || [],
          notes: employeeData.notes || '',
          actif: true,
          // Horaires par d√©faut
          lundi_debut: employeeData.lundi_debut || '08:00',
          lundi_fin: employeeData.lundi_fin || '16:00',
          mardi_debut: employeeData.mardi_debut || '08:00',
          mardi_fin: employeeData.mardi_fin || '16:00',
          mercredi_debut: employeeData.mercredi_debut || '08:00',
          mercredi_fin: employeeData.mercredi_fin || '16:00',
          jeudi_debut: employeeData.jeudi_debut || '08:00',
          jeudi_fin: employeeData.jeudi_fin || '16:00',
          vendredi_debut: employeeData.vendredi_debut || '08:00',
          vendredi_fin: employeeData.vendredi_fin || '16:00'
        }])
        .select()
        .single();

      if (createError) {
        console.error('‚ùå Erreur cr√©ation employ√©:', createError);
        return { data: null, error: createError };
      }

      // 3. Cr√©er les comp√©tences v√©hicules par d√©faut si fournies
      if (employeeData.competencesVehicules && employeeData.competencesVehicules.length > 0) {
        const competencesToInsert = employeeData.competencesVehicules
          .filter(comp => comp.niveau && comp.niveau !== 'Aucune')
          .map(comp => ({
            employee_id: newEmployee.id,
            vehicule_id: comp.vehicule_id,
            niveau: comp.niveau
          }));

        if (competencesToInsert.length > 0) {
          const { error: competencesError } = await supabase
            .from('competences_vehicules')
            .insert(competencesToInsert);

          if (competencesError) {
            console.error('‚ùå Erreur cr√©ation comp√©tences:', competencesError);
            // Ne pas faire √©chouer la cr√©ation pour les comp√©tences
          } else {
            console.log('‚úÖ Comp√©tences v√©hicules cr√©√©es');
          }
        }
      }

      console.log('‚úÖ Employ√© logistique cr√©√© avec succ√®s');
      return { data: newEmployee, error: null };

    } catch (error) {
      console.error('üí• Erreur critique cr√©ation employ√©:', error);
      return { data: null, error };
    }
  },

  // ==================== V√âHICULES ====================
  
  /**
   * R√©cup√©rer tous les v√©hicules
   */
  async getVehicules() {
    try {
      console.log('üìä getVehicules - Chargement v√©hicules...');
      
      const { data, error } = await supabase
        .from('vehicules_logistique')
        .select('*')
        .eq('actif', true)
        .order('nom');
      
      if (error) {
        console.error('‚ùå Erreur getVehicules:', error);
        throw error;
      }

      console.log('‚úÖ V√©hicules charg√©s:', data?.length || 0);
      return { data: data || [], error: null };
      
    } catch (error) {
      console.error('üí• Erreur critique getVehicules:', error);
      return { data: [], error };
    }
  },

  // ==================== COMP√âTENCES V√âHICULES ====================
  
  /**
   * R√©cup√©rer les comp√©tences v√©hicules avec employ√©s
   */
  async getCompetencesVehicules() {
    try {
      console.log('üìä getCompetencesVehicules - Chargement comp√©tences...');
      
      const { data, error } = await supabase
        .from('competences_vehicules')
        .select(`
          *,
          employe:employes_logistique_new(id, nom, profil),
          vehicule:vehicules_logistique(id, nom, capacite)
        `)
        .order('employee_id');
      
      if (error) {
        console.error('‚ùå Erreur getCompetencesVehicules:', error);
        throw error;
      }

      console.log('‚úÖ Comp√©tences v√©hicules charg√©es:', data?.length || 0);
      return { data: data || [], error: null };
      
    } catch (error) {
      console.error('üí• Erreur critique getCompetencesVehicules:', error);
      return { data: [], error };
    }
  },

  /**
   * Mettre √† jour une comp√©tence v√©hicule
   */
  async updateCompetenceVehicule(employeeId, vehiculeId, niveau) {
    try {
      console.log('üîß updateCompetenceVehicule:', { employeeId, vehiculeId, niveau });
      
      if (niveau && niveau !== '' && niveau !== 'Aucune') {
        // Cr√©er ou mettre √† jour la comp√©tence
        
        // D'abord v√©rifier si l'enregistrement existe d√©j√†
        const { data: existing, error: checkError } = await supabase
          .from('competences_vehicules')
          .select('*')
          .eq('employee_id', employeeId)
          .eq('vehicule_id', vehiculeId)
          .single();
        
        if (checkError && checkError.code !== 'PGRST116') {
          // PGRST116 = "The result contains 0 rows" (pas d'erreur, juste pas de r√©sultat)
          throw checkError;
        }
        
        if (existing) {
          // Mettre √† jour l'enregistrement existant
          const { data, error } = await supabase
            .from('competences_vehicules')
            .update({ niveau: niveau })
            .eq('employee_id', employeeId)
            .eq('vehicule_id', vehiculeId)
            .select();
          
          if (error) throw error;
          console.log('‚úÖ Comp√©tence v√©hicule mise √† jour:', data);
          return { data, error: null };
        } else {
          // Cr√©er un nouvel enregistrement
          const { data, error } = await supabase
            .from('competences_vehicules')
            .insert({
              employee_id: employeeId,
              vehicule_id: vehiculeId,
              niveau: niveau
            })
            .select();
          
          if (error) throw error;
          console.log('‚úÖ Comp√©tence v√©hicule cr√©√©e:', data);
          return { data, error: null };
        }
      } else {
        // Supprimer la comp√©tence (niveau vide, null ou 'Aucune')
        const { data, error } = await supabase
          .from('competences_vehicules')
          .delete()
          .eq('employee_id', employeeId)
          .eq('vehicule_id', vehiculeId);
        
        if (error) throw error;
        console.log('‚úÖ Comp√©tence v√©hicule supprim√©e');
        return { data, error: null };
      }
      
    } catch (error) {
      console.error('‚ùå Erreur updateCompetenceVehicule:', error);
      return { data: null, error };
    }
  },

  // ==================== PLANNING LOGISTIQUE ====================
  
  /**
   * Sauvegarder le planning hebdomadaire
   */
  async savePlanningHebdomadaire(planningData, weekStart) {
    try {
      console.log('üíæ Sauvegarde planning hebdomadaire...');
      
      // Calculer les dates de la semaine
      const weekDates = [];
      for (let i = 0; i < 5; i++) {
        const date = new Date(weekStart);
        date.setDate(date.getDate() + i);
        weekDates.push(date.toISOString().split('T')[0]);
      }
      
      // Supprimer l'ancien planning pour cette semaine
      const { error: deleteError } = await supabase
        .from('planning_logistique_new')
        .delete()
        .in('date', weekDates);
      
      if (deleteError) {
        console.error('‚ùå Erreur suppression ancien planning:', deleteError);
        throw deleteError;
      }
      
      // Mapper les r√¥les vers les valeurs autoris√©es en base
      const mapRole = (role) => {
        switch (role?.toLowerCase()) {
          case 'conducteur':
            return 'Conducteur';
          case 'assistant':
            return 'Assistant';
          case 'convoyeur':
          case 'equipier':
          default:
            return '√âquipier';
        }
      };
      
      // Pr√©parer les donn√©es √† ins√©rer
      const insertData = [];
      
      Object.entries(planningData).forEach(([dateKey, vehiclesPlanning]) => {
        Object.entries(vehiclesPlanning).forEach(([vehicleId, employees]) => {
          // üîß CORRECTION : Ignorer la section "absents" qui n'est pas un v√©hicule
          if (vehicleId === 'absents' || !Array.isArray(employees)) {
            return; // Passer √† l'it√©ration suivante
          }
          
          const parsedVehicleId = parseInt(vehicleId);
          if (isNaN(parsedVehicleId)) {
            console.warn(`‚ö†Ô∏è ID v√©hicule invalide ignor√©: ${vehicleId}`);
            return;
          }
          
          employees.forEach((employee, index) => {
            // V√©rifier que l'employ√© a un ID valide
            if (!employee.id || isNaN(parseInt(employee.id))) {
              console.warn(`‚ö†Ô∏è Employ√© avec ID invalide ignor√©:`, employee);
              return;
            }
            
            // Cr√©er une entr√©e pour le matin
            insertData.push({
              employee_id: parseInt(employee.id),
              vehicule_id: parsedVehicleId,
              date: dateKey,
              creneau: 'matin',
              role: mapRole(employee.role),
              notes: null,
              absent: false // S'assurer que ce ne sont pas des absents
            });
            
            // Cr√©er une entr√©e pour l'apr√®s-midi
            insertData.push({
              employee_id: parseInt(employee.id),
              vehicule_id: parsedVehicleId,
              date: dateKey,
              creneau: 'apres-midi',
              role: mapRole(employee.role),
              notes: null,
              absent: false // S'assurer que ce ne sont pas des absents
            });
          });
        });
      });
      
      // Ins√©rer le nouveau planning
      if (insertData.length > 0) {
        const { data, error: insertError } = await supabase
          .from('planning_logistique_new')
          .insert(insertData)
          .select();
        
        if (insertError) {
          console.error('‚ùå Erreur insertion planning:', insertError);
          throw insertError;
        }
        
        console.log('‚úÖ Planning sauvegard√©:', data?.length, 'assignations');
        return { data, error: null };
      } else {
        console.log('‚ÑπÔ∏è Aucune assignation √† sauvegarder');
        return { data: [], error: null };
      }
      
    } catch (error) {
      console.error('üí• Erreur critique sauvegarde planning:', error);
      return { data: null, error };
    }
  },

  /**
   * Charger le planning hebdomadaire existant
   */
  async loadPlanningHebdomadaire(weekStart) {
    try {
      console.log('üìä Chargement planning hebdomadaire...');
      
      // Calculer les dates de la semaine
      const weekDates = [];
      for (let i = 0; i < 5; i++) {
        const date = new Date(weekStart);
        date.setDate(date.getDate() + i);
        const dateStr = date.toISOString().split('T')[0];
        weekDates.push(dateStr);
      }
      
      console.log('üìÖ Chargement planning pour:', weekDates);
      
      const { data, error } = await supabase
        .from('planning_logistique_new')
        .select(`
          *,
          employe:employes_logistique_new(id, nom, profil, permis, langues),
          vehicule:vehicules_logistique(id, nom, capacite, couleur)
        `)
        .in('date', weekDates)
        .order('date')
        .order('creneau');
      
      if (error) {
        console.error('‚ùå Erreur chargement planning:', error);
        throw error;
      }
      
      // Restructurer les donn√©es au format attendu par l'interface
      const planningFormatted = {};
      
      weekDates.forEach(date => {
        planningFormatted[date] = {
          absents: [] // üîß CORRECTION : Initialiser la section absents pour chaque jour
        };
      });
      
      if (data && data.length > 0) {
        // Grouper par employ√© pour √©viter les doublons (matin + apr√®s-midi = 1 assignation)
        const employeeAssignments = new Map();
        
        data.forEach(assignment => {
          // üîß CORRECTION : Ignorer les lignes marqu√©es comme absentes dans le planning normal
          if (assignment.absent === true) {
            return; // Les absents sont g√©r√©s s√©par√©ment par getAbsencesLogistique
          }
          
          const key = `${assignment.date}-${assignment.employee_id}-${assignment.vehicule_id}`;
          
          if (!employeeAssignments.has(key)) {
            employeeAssignments.set(key, {
              ...assignment.employe,
              status: 'assigned',
              role: assignment.role?.toLowerCase() || 'equipier'
            });
          }
        });
        
        // R√©partir les assignations uniques dans le planning
        data.forEach(assignment => {
          // üîß CORRECTION : Ignorer les absents dans le planning normal
          if (assignment.absent === true) {
            return;
          }
          
          const dateKey = assignment.date;
          const vehicleId = assignment.vehicule_id;
          const key = `${assignment.date}-${assignment.employee_id}-${assignment.vehicule_id}`;
          
          if (!planningFormatted[dateKey]) {
            planningFormatted[dateKey] = {
              absents: []
            };
          }
          
          if (!planningFormatted[dateKey][vehicleId]) {
            planningFormatted[dateKey][vehicleId] = [];
          }
          
          // Ajouter l'employ√© seulement s'il n'est pas d√©j√† dans cette case
          const employeeAlreadyAdded = planningFormatted[dateKey][vehicleId].some(
            emp => emp.id === assignment.employee_id
          );
          
          if (!employeeAlreadyAdded && employeeAssignments.has(key)) {
            planningFormatted[dateKey][vehicleId].push(employeeAssignments.get(key));
          }
        });
      }
      
      console.log('‚úÖ Planning charg√©:', Object.keys(planningFormatted).length, 'jours');
      return { data: planningFormatted, error: null };
      
    } catch (error) {
      console.error('üí• Erreur critique chargement planning:', error);
      return { data: null, error };
    }
  },

  /**
   * R√©cup√©rer le planning logistique avec jointures
   */
  async getPlanningLogistique(dateDebut = null, dateFin = null) {
    try {
      console.log('üìä getPlanningLogistique - Chargement planning...');
      
      let query = supabase
        .from('planning_logistique_new')
        .select(`
          *,
          employe:employes_logistique_new(id, nom, profil),
          vehicule:vehicules_logistique(id, nom, capacite, couleur)
        `);
        
      if (dateDebut) {
        if (dateFin) {
          query = query.gte('date', dateDebut).lte('date', dateFin);
        } else {
          query = query.eq('date', dateDebut);
        }
      }
      
      const { data, error } = await query.order('date').order('creneau');
      
      if (error) {
        console.error('‚ùå Erreur getPlanningLogistique:', error);
        throw error;
      }

      console.log('‚úÖ Planning logistique charg√©:', data?.length || 0);
      return { data: data || [], error: null };
      
    } catch (error) {
      console.error('üí• Erreur critique getPlanningLogistique:', error);
      return { data: [], error };
    }
  },

  // =================== ABSENCES LOGISTIQUE ===================
  
  /**
   * Obtenir toutes les absences de la semaine depuis la vraie table absences
   * üëÅÔ∏è LECTURE SEULE - Affichage uniquement dans le planning
   */
  async getAbsencesLogistique(dateDebut = null, dateFin = null) {
    try {
      // Si aucune date fournie, prendre une plage large pour avoir toutes les absences
      if (!dateDebut || !dateFin) {
        const today = new Date();
        const past = new Date(today);
        past.setDate(past.getDate() - 365); // 1 an en arri√®re
        const future = new Date(today);
        future.setDate(future.getDate() + 365); // 1 an en avant
        
        dateDebut = past.toISOString().split('T')[0];
        dateFin = future.toISOString().split('T')[0];
      }

      const { data, error } = await supabase
        .from('absences_logistique_new')
        .select(`
          id,
          employee_id,
          date_debut,
          date_fin,
          type_absence,
          motif,
          heure_debut,
          heure_fin,
          employes_logistique_new (
            id,
            nom,
            profil
          )
        `)
        .gte('date_fin', dateDebut)     // Absence finit apr√®s le d√©but de la p√©riode
        .lte('date_debut', dateFin)     // Absence commence avant la fin de la p√©riode
        .order('date_debut', { ascending: false });

      if (error) throw error;

      // Formatter pour l'affichage dans le planning
      const formattedData = data.map(item => ({
        id: item.id,
        employee_id: item.employee_id,
        date_debut: item.date_debut,
        date_fin: item.date_fin,
        type_absence: item.type_absence || 'Absent',
        motif: item.motif,
        heure_debut: item.heure_debut,
        heure_fin: item.heure_fin,
        employee_name: item.employes_logistique_new?.nom || 'Inconnu',
        employee: item.employes_logistique_new // Donn√©es compl√®tes employ√© pour affichage
      }));

      console.log('‚úÖ Absences logistique charg√©es (lecture seule):', formattedData.length);
      return { data: formattedData, error: null };
    } catch (error) {
      console.error('‚ùå Erreur getAbsencesLogistique:', error);
      return { data: [], error };
    }
  },

  /**
   * Ajouter une nouvelle absence
   */
  async addAbsence(absenceData) {
    try {
      const { data, error } = await supabase
        .from('absences_logistique_new')
        .insert([absenceData])
        .select(`
          *,
          employes_logistique_new (
            id,
            nom,
            profil
          )
        `);

      if (error) throw error;

      console.log('‚úÖ Absence ajout√©e:', data);
      return { data: data[0], error: null };
    } catch (error) {
      console.error('‚ùå Erreur addAbsence:', error);
      return { data: null, error };
    }
  },

  /**
   * Modifier une absence existante
   */
  async updateAbsence(absenceId, updates) {
    try {
      const { data, error } = await supabase
        .from('absences_logistique_new')
        .update(updates)
        .eq('id', absenceId)
        .select(`
          *,
          employes_logistique_new (
            id,
            nom,
            profil
          )
        `);

      if (error) throw error;

      console.log('‚úÖ Absence modifi√©e:', data);
      return { data: data[0], error: null };
    } catch (error) {
      console.error('‚ùå Erreur updateAbsence:', error);
      return { data: null, error };
    }
  },

  /**
   * Supprimer une absence
   */
  async deleteAbsence(absenceId) {
    try {
      const { data, error } = await supabase
        .from('absences_logistique_new')
        .delete()
        .eq('id', absenceId);

      if (error) throw error;

      console.log('‚úÖ Absence supprim√©e');
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Erreur deleteAbsence:', error);
      return { data: null, error };
    }
  },

  /**
   * R√©cup√©rer le planning d'une semaine
   */
  async getPlanningByWeek(startDate) {
    try {
      const weekDates = this._generateWeekDates(startDate);
      const startDateStr = weekDates[0];
      const endDateStr = weekDates[weekDates.length - 1];

      const { data, error } = await supabase
        .from('planning_logistique_new')
        .select(`
          *,
          employes_logistique_new (
            nom,
            profil,
            permis
          ),
          vehicules_logistique (
            nom,
            capacite
          )
        `)
        .gte('date', startDateStr)
        .lte('date', endDateStr)
        .order('date')
        .order('creneau');

      if (error) throw error;

      console.log('‚úÖ Planning semaine charg√©:', data?.length || 0, 'entr√©es');
      return { data: data || [], error: null };
      
    } catch (error) {
      console.error('‚ùå Erreur getPlanningByWeek:', error);
      return { data: [], error };
    }
  },

  /**
   * Supprimer le planning d'un jour donn√©
   */
  async clearDayPlanning(date) {
    try {
      const { data, error } = await supabase
        .from('planning_logistique_new')
        .delete()
        .eq('date', date);

      if (error) throw error;

      console.log(`‚úÖ Planning supprim√© pour ${date}`);
      return { data, error: null };
      
    } catch (error) {
      console.error('‚ùå Erreur clearDayPlanning:', error);
      return { data: null, error };
    }
  },

  // ==================== G√âN√âRATEUR AUTOMATIQUE DE PLANNING ====================

  /**
   * ‚úÖ G√âN√âRATEUR AUTOMATIQUE DE PLANNING - VERSION REFACTORIS√âE
   * Utilise le nouveau moteur de planning modulaire
   */
  async generateWeeklyPlanning(startDate, options = {}) {
    const { replaceExisting = true, fillGapsOnly = false } = options;

    console.log('üöÄ G√âN√âRATION PLANNING - D√©marrage (version refactoris√©e)', {
      startDate,
      replaceExisting,
      fillGapsOnly
    });

    try {
      // 1. Charger toutes les donn√©es n√©cessaires
      const [employeesRes, vehiculesRes, competencesRes, existingPlanningRes, absencesRes] = await Promise.all([
        this.getEmployeesLogistique(),
        this.getVehicules(),
        this.getCompetencesVehicules(),
        this.getPlanningByWeek(startDate),
        this.getAbsencesLogistique(startDate, this._addDays(startDate, 6))
      ]);

      if (employeesRes.error) throw employeesRes.error;
      if (vehiculesRes.error) throw vehiculesRes.error;
      if (competencesRes.error) throw competencesRes.error;
      if (absencesRes.error) throw absencesRes.error;

      const employees = employeesRes.data;
      const vehicules = vehiculesRes.data.filter(v => v.actif);
      const competences = competencesRes.data;
      const existingPlanning = existingPlanningRes.data || [];
      const absences = absencesRes.data || [];

      console.log('üìä Donn√©es charg√©es:', {
        employees: employees.length,
        vehicules: vehicules.length,
        competences: competences.length,
        existingPlanning: existingPlanning.length,
        absences: absences.length
      });

      // 2. Importer et utiliser le nouveau moteur de planning
      const { generateWeeklyPlanning } = await import('./logistique/planning-engine/index.js');
      
      // 3. G√©n√©rer le planning avec le moteur refactoris√©
      const result = await generateWeeklyPlanning(
        startDate, 
        employees, 
        vehicules, 
        competences, 
        absences, 
        options
      );

      if (!result.success) {
        throw new Error('√âchec de g√©n√©ration du planning');
      }

      console.log('‚úÖ Planning g√©n√©r√© avec succ√®s:', result.summary);

      // 4. Sauvegarder le planning g√©n√©r√©
      if (replaceExisting) {
        await this._clearWeekPlanning(startDate);
      }

      const saveResult = await this._savePlanningEntries(
        result.planningEntries, 
        fillGapsOnly ? existingPlanning : []
      );
      
      if (saveResult.error) throw saveResult.error;

      console.log('üíæ Planning sauvegard√© avec succ√®s');

      return {
        success: true,
        data: {
          entriesCreated: result.planningEntries.length,
          validation: result.validation,
          summary: result.summary
        }
      };

    } catch (error) {
      console.error('‚ùå ERREUR G√âN√âRATION PLANNING:', error);
      return {
        success: false,
        error: {
          message: error.message,
          details: error.stack
        }
      };
    }
  },

  /**
   * G√©n√©rer le planning pour un jour et un cr√©neau
   */
  async _generateDayPlanning(availableEmployees, vehicles, competences, date, creneau, dayName, rotationState, existingPlanning, morningPlanning = null) {
    const planning = [];
    const employeesUsed = new Set();

    // ‚úÖ NOUVEAU : Sauvegarder les employ√©s pour les v√©rifications de conflit
    this.lastAvailableEmployees = availableEmployees;

    // Mettre √† jour les comp√©tences dans rotationState
    rotationState.competences = competences;

    // Si apr√®s-midi et qu'on a le planning matin, on garde les m√™mes √©quipes
    if (creneau === 'apres-midi' && morningPlanning) {
      return this._adaptMorningToAfternoon(morningPlanning, date, availableEmployees, dayName);
    }

    // Trier les v√©hicules par priorit√©
    const sortedVehicles = this._sortVehiclesByPriority(vehicles, dayName);

    for (const vehicle of sortedVehicles) {
      // V√©rifier si le planning existe d√©j√† pour ce v√©hicule/date/cr√©neau
      const existingEntry = existingPlanning.find(p => 
        p.vehicule_id === vehicle.id && 
        p.date === date && 
        p.creneau === creneau
      );

      if (existingEntry) {
        console.log(`‚è≠Ô∏è Planning existant trouv√© pour ${vehicle.nom} ${date} ${creneau}`);
        continue;
      }

      // Appliquer les contraintes sp√©ciales avec gestion des conflits
      const teamMembers = this._assignTeamToVehicle(
        vehicle, 
        availableEmployees, 
        competences, 
        employeesUsed, 
        creneau, 
        dayName, 
        rotationState
      );

      // Ajouter les membres de l'√©quipe au planning
      teamMembers.forEach(member => {
        planning.push({
          employee_id: member.employee_id,
          vehicule_id: vehicle.id,
          date: date,
          creneau: creneau,
          role: member.role,
          notes: member.notes || null
        });
        employeesUsed.add(member.employee_id);
      });
    }

    return planning;
  },

  /**
   * Assigner une √©quipe √† un v√©hicule selon les r√®gles m√©tier
   */
  _assignTeamToVehicle(vehicle, availableEmployees, competences, employeesUsed, creneau, dayName, rotationState) {
    const team = [];
    const minTeamSize = 2;
    const maxTeamSize = vehicle.capacite;

    // Contraintes sp√©ciales par v√©hicule
    if (vehicle.nom === 'Transit') {
      return this._assignTransitTeam(availableEmployees, employeesUsed, creneau, dayName);
    }

    if (vehicle.nom === 'Caddy') {
      // Caddy avec Elton (matin et apr√®s-midi, simplification)
      return this._assignCaddyTeam(availableEmployees, employeesUsed);
    }

    // ‚úÖ NOUVELLES R√àGLES SP√âCIALES : Margot (Crafter 21) et Martial (Ducato)
    // CONTRAINTE : Ils ne peuvent pas √™tre avec Jack ou Didier
    const jackPresent = availableEmployees.some(emp => emp.nom === 'Jack');
    const conflictGroup = ['Margot', 'Jack', 'Martial', 'Didier'];
    
    // ‚úÖ R√àGLE MARGOT : Normalement Crafter 21, mais v√©rifier les conflits
    if (vehicle.nom === 'Crafter 21') {
      const margot = availableEmployees.find(emp => emp.nom === 'Margot');
      
      if (margot && !employeesUsed.has(margot.id)) {
        // V√©rifier qu'aucun membre conflictuel n'est d√©j√† dans l'√©quipe
        if (!this._hasConflict(team, 'Margot')) {
          console.log(`üöê CRAFTER 21: Assignation prioritaire de Margot (pas de conflit)`);
          
          // Forcer Margot comme conducteur si elle a le permis, sinon √©quipier
          team.push({
            employee_id: margot.id,
            role: margot.permis ? 'Conducteur' : '√âquipier',
            notes: `Assignation prioritaire Crafter 21 - Margot (${margot.profil})`
          });
          employeesUsed.add(margot.id);
        } else {
          console.log(`üöê CRAFTER 21: Margot ne peut pas √™tre assign√©e (conflit d√©tect√©)`);
        }
      }
    }
    
    // ‚úÖ R√àGLE MARTIAL : Normalement Ducato, mais v√©rifier les conflits  
    if (vehicle.nom === 'Ducato') {
      const martial = availableEmployees.find(emp => emp.nom === 'Martial');
      
      if (martial && !employeesUsed.has(martial.id)) {
        // V√©rifier qu'aucun membre conflictuel n'est d√©j√† dans l'√©quipe
        if (!this._hasConflict(team, 'Martial')) {
          console.log(`üöõ DUCATO: Assignation prioritaire de Martial (pas de conflit)`);
          
          // Forcer Martial comme conducteur si il a le permis, sinon √©quipier
          team.push({
            employee_id: martial.id,
            role: martial.permis ? 'Conducteur' : '√âquipier',
            notes: `Assignation prioritaire Ducato - Martial (${martial.profil})`
          });
          employeesUsed.add(martial.id);
        } else {
          console.log(`üöõ DUCATO: Martial ne peut pas √™tre assign√© (conflit d√©tect√©)`);
        }
      }
    }

    // R√©cup√©rer les employ√©s comp√©tents pour ce v√©hicule
    const competentEmployees = this._getCompetentEmployees(vehicle.id, availableEmployees, competences, employeesUsed);
    
    if (competentEmployees.length === 0) {
      console.warn(`‚ö†Ô∏è Aucun employ√© comp√©tent disponible pour ${vehicle.nom}`);
      return [];
    }

    // 1. Assigner le conducteur (priorit√© + permis + autonome + rotation)
    const driver = this._selectDriver(competentEmployees, rotationState, vehicle.nom);
    if (driver) {
      team.push({
        employee_id: driver.id,
        role: 'Conducteur',
        notes: `Conducteur d√©sign√© (${driver.profil})`
      });
      employeesUsed.add(driver.id);
    }

    // 2. Compl√©ter l'√©quipe avec √©quipiers/assistants
    const remainingSlots = Math.min(maxTeamSize - team.length, 5); // Max 5 en plus du conducteur
    const remainingEmployees = competentEmployees.filter(emp => !employeesUsed.has(emp.id));

    for (let i = 0; i < remainingSlots && remainingEmployees.length > 0; i++) {
      const member = this._selectTeamMember(remainingEmployees, competences, vehicle.id);
      if (member) {
        // ‚úÖ NOUVEAU : V√©rifier les conflits avant d'ajouter
        if (!this._hasConflict(team, member.nom)) {
          team.push({
            employee_id: member.id,
            role: i === 0 ? '√âquipier' : 'Assistant',
            notes: this._generateMemberNotes(member, competences, vehicle.id)
          });
          employeesUsed.add(member.id);
          console.log(`‚úÖ ${vehicle.nom}: ${member.nom} ajout√© (pas de conflit)`);
        } else {
          console.log(`‚ö†Ô∏è ${vehicle.nom}: ${member.nom} ignor√© (conflit d√©tect√©)`);
        }
        
        // Retirer de la liste disponible dans tous les cas
        const index = remainingEmployees.findIndex(e => e.id === member.id);
        if (index > -1) remainingEmployees.splice(index, 1);
      }
    }

    // S'assurer qu'on a au moins 2 personnes
    if (team.length < minTeamSize) {
      console.warn(`‚ö†Ô∏è √âquipe incompl√®te pour ${vehicle.nom}: ${team.length}/${minTeamSize} personnes`);
    }

    return team;
  },

  /**
   * ‚úÖ NOUVEAU : V√©rifier les conflits entre employ√©s
   * Margot, Jack, Martial et Didier ne peuvent pas √™tre ensemble
   */
  _hasConflict(teamMembers, newEmployeeName) {
    const conflictGroup = ['Margot', 'Jack', 'Martial', 'Didier'];
    
    // Si le nouvel employ√© n'est pas dans le groupe conflictuel, pas de probl√®me
    if (!conflictGroup.includes(newEmployeeName)) {
      return false;
    }
    
    // Compter combien de membres du groupe conflictuel sont d√©j√† dans l'√©quipe
    const existingConflictMembers = teamMembers.filter(member => {
      const employee = this.lastAvailableEmployees?.find(emp => emp.id === member.employee_id);
      return employee && conflictGroup.includes(employee.nom);
    });
    
    // Si il y a d√©j√† quelqu'un du groupe, c'est un conflit
    if (existingConflictMembers.length > 0) {
      console.log(`‚ö†Ô∏è CONFLIT D√âTECT√â: ${newEmployeeName} ne peut pas rejoindre l'√©quipe (d√©j√† ${existingConflictMembers.length} membre(s) conflictuel(s))`);
      return true;
    }
    
    return false;
  },

  /**
   * ‚úÖ NOUVEAU : Trouver le meilleur v√©hicule pour un employ√© conflictuel
   */
  _findBestVehicleForConflictEmployee(employeeName, vehicles, currentAssignments, availableEmployees) {
    const conflictGroup = ['Margot', 'Jack', 'Martial', 'Didier'];
    
    for (const vehicle of vehicles) {
      const currentTeam = currentAssignments[vehicle.nom] || [];
      
      // V√©rifier si ce v√©hicule a d√©j√† des membres conflictuels
      const hasConflictMember = currentTeam.some(member => {
        const employee = availableEmployees.find(emp => emp.id === member.employee_id);
        return employee && conflictGroup.includes(employee.nom);
      });
      
      // Si pas de conflit et il reste de la place
      if (!hasConflictMember && currentTeam.length < vehicle.capacite) {
        console.log(`‚úÖ V√©hicule libre trouv√© pour ${employeeName}: ${vehicle.nom}`);
        return vehicle;
      }
    }
    
    console.warn(`‚ö†Ô∏è Aucun v√©hicule libre trouv√© pour ${employeeName}`);
    return null;
  },

  /**
   * ‚úÖ NOUVELLES R√àGLES TRANSIT COMPLEXES
   * Cascade : Jack ‚Üí Didier(lundi)/Margot/Martial selon disponibilit√©
   */
  _assignTransitTeam(availableEmployees, employeesUsed, creneau, dayName) {
    const team = [];
    const isLundi = dayName === 'lundi';
    const conflictGroup = ['Margot', 'Jack', 'Martial', 'Didier'];

    console.log('üöó TRANSIT ASSIGNMENT - Employ√©s disponibles:', availableEmployees.map(e => e.nom));
    console.log('üöó TRANSIT ASSIGNMENT - Jour:', dayName);

    // ‚úÖ STRAT√âGIE R√âVIS√âE : 1 seul membre du groupe conflictuel par v√©hicule
    
    // PRIORIT√â 1 : Jack si disponible
    const jack = availableEmployees.find(emp => emp.nom === 'Jack' && !employeesUsed.has(emp.id));
    let conflictMemberAssigned = false;
    
    if (jack) {
      if (employeesUsed.has(jack.id)) {
        console.log(`‚ö†Ô∏è TRANSIT OVERRIDE: R√©cup√©ration de Jack depuis un autre v√©hicule`);
        employeesUsed.delete(jack.id);
      }
      
      team.push({
        employee_id: jack.id,
        role: jack.permis ? 'Conducteur' : '√âquipier',
        notes: `Membre prioritaire Transit - Jack (${jack.profil})`
      });
      employeesUsed.add(jack.id);
      conflictMemberAssigned = true;
      console.log(`‚úÖ TRANSIT: Jack assign√© (groupe conflictuel)`);
    }
    
    // PRIORIT√â 2 : Si Jack absent, alors Didier le lundi, sinon Margot, sinon Martial
    if (!conflictMemberAssigned) {
      let replacementFound = false;
      
      // Lundi : essayer Didier d'abord
      if (isLundi) {
        const didier = availableEmployees.find(emp => emp.nom === 'Didier' && !employeesUsed.has(emp.id));
        if (didier) {
          team.push({
            employee_id: didier.id,
            role: didier.permis ? 'Conducteur' : '√âquipier',
            notes: `Remplacement Jack - Didier lundi (${didier.profil})`
          });
          employeesUsed.add(didier.id);
          conflictMemberAssigned = true;
          replacementFound = true;
          console.log(`‚úÖ TRANSIT LUNDI: Didier remplace Jack`);
        }
      }
      
      // Si pas trouv√©, essayer Margot
      if (!replacementFound) {
        const margot = availableEmployees.find(emp => emp.nom === 'Margot' && !employeesUsed.has(emp.id));
        if (margot) {
          team.push({
            employee_id: margot.id,
            role: margot.permis ? 'Conducteur' : '√âquipier',
            notes: `Remplacement Jack - Margot (${margot.profil})`
          });
          employeesUsed.add(margot.id);
          conflictMemberAssigned = true;
          replacementFound = true;
          console.log(`‚úÖ TRANSIT: Margot remplace Jack`);
        }
      }
      
      // Dernier recours : Martial
      if (!replacementFound) {
        const martial = availableEmployees.find(emp => emp.nom === 'Martial' && !employeesUsed.has(emp.id));
        if (martial) {
          team.push({
            employee_id: martial.id,
            role: martial.permis ? 'Conducteur' : '√âquipier',
            notes: `Remplacement Jack - Martial (${martial.profil})`
          });
          employeesUsed.add(martial.id);
          conflictMemberAssigned = true;
          console.log(`‚úÖ TRANSIT: Martial remplace Jack`);
        }
      }
    }

    // ‚úÖ COMPL√âTER AVEC LES ANCIENS MEMBRES (Hassene, Mejrema, Tamara) - PAS de conflit
    const anciensMembres = ['Hassene', 'Mejrema', 'Tamara'];
    anciensMembres.forEach(name => {
      const employee = availableEmployees.find(emp => emp.nom === name && !employeesUsed.has(emp.id));
      
      if (employee && team.length < 4) {
        team.push({
          employee_id: employee.id,
          role: employee.permis && team.filter(t => t.role === 'Conducteur').length === 0 ? 'Conducteur' : '√âquipier',
          notes: `Ancien membre Transit - ${name} (${employee.profil})`
        });
        employeesUsed.add(employee.id);
        console.log(`‚úÖ TRANSIT: ${name} ajout√© (pas de conflit)`);
      }
    });

    // ‚úÖ COMPL√âTER avec d'autres employ√©s NON-conflictuels
    const otherEmployees = availableEmployees.filter(emp => 
      !employeesUsed.has(emp.id) && 
      !conflictGroup.includes(emp.nom) &&
      !anciensMembres.includes(emp.nom)
    );
    
    for (const employee of otherEmployees) {
      if (team.length >= 4) break; // Limite raisonnable
      
      team.push({
        employee_id: employee.id,
        role: employee.permis && team.filter(t => t.role === 'Conducteur').length === 0 ? 'Conducteur' : '√âquipier',
        notes: `√âquipier Transit - ${employee.nom} (${employee.profil})`
      });
      employeesUsed.add(employee.id);
      console.log(`‚úÖ TRANSIT: ${employee.nom} ajout√© (compl√©ment)`);
    }

    // ‚úÖ S'assurer qu'il y a au moins un conducteur
    const hasDriver = team.some(member => member.role === 'Conducteur');
    
    if (!hasDriver && team.length > 0) {
      // Chercher un membre avec permis et le promouvoir conducteur
      const driverCandidate = team.find(member => {
        const employee = availableEmployees.find(emp => emp.id === member.employee_id);
        return employee && employee.permis;
      });
      
      if (driverCandidate) {
        driverCandidate.role = 'Conducteur';
        console.log(`‚úÖ TRANSIT: Promotion conducteur pour membre existant`);
      } else {
        // Ajouter un conducteur externe si n√©cessaire
        const externalDriver = availableEmployees.find(emp => 
          emp.permis && !employeesUsed.has(emp.id)
        );
        
        if (externalDriver) {
          team.push({
            employee_id: externalDriver.id,
            role: 'Conducteur',
            notes: `Conducteur ajout√© Transit (${externalDriver.profil})`
          });
          employeesUsed.add(externalDriver.id);
          console.log(`‚úÖ TRANSIT: Conducteur externe ajout√© - ${externalDriver.nom}`);
        }
      }
    }

    console.log('üöó TRANSIT FINAL TEAM:', team.length, 'membres (sans conflit)');
    return team;
  },

  /**
   * √âquipe sp√©ciale pour Caddy (Elton toujours, pas de r√¥les sp√©cifiques)
   */
  _assignCaddyTeam(availableEmployees, employeesUsed) {
    const team = [];
    
    // Elton est toujours l√† l'apr√®s-midi
    const elton = availableEmployees.find(emp => 
      emp.nom === 'Elton' && !employeesUsed.has(emp.id)
    );
    
    if (elton) {
      team.push({
        employee_id: elton.id,
        role: '√âquipier',
        notes: 'Membre fixe Caddy apr√®s-midi'
      });
      employeesUsed.add(elton.id);
    }

    // Compl√©ter avec d'autres employ√©s disponibles (pas de r√¥le sp√©cial conducteur)
    const remainingEmployees = availableEmployees.filter(emp => !employeesUsed.has(emp.id));
    
    // R√âDUCTION: Maximum 2-3 personnes en plus d'Elton (au lieu de 5)
    for (let i = 0; i < 2 && remainingEmployees.length > 0; i++) {
      const member = remainingEmployees.shift();
      team.push({
        employee_id: member.id,
        role: '√âquipier', // Tout le monde en √©quipier sur le Caddy
        notes: `√âquipier Caddy (${member.profil})`
      });
      employeesUsed.add(member.id);
    }

    console.log('üöõ CADDY FINAL TEAM:', team.length, 'membres (r√©duit pour √©quilibrer)');
    return team;
  },

  /**
   * S√©lectionner le conducteur selon la rotation et les priorit√©s
   */
  _selectDriver(competentEmployees, rotationState, vehicleName) {
    // Filtrer les employ√©s avec permis et niveau XX (autonome)
    const driverCandidates = competentEmployees.filter(emp => 
      emp.permis && 
      this._isAutonomous(emp.id, competentEmployees, rotationState.competences)
    );

    if (driverCandidates.length === 0) {
      console.warn(`‚ö†Ô∏è Aucun conducteur autonome disponible pour ${vehicleName}`);
      return null;
    }

    // Priorit√© : Fort > Moyen > Faible
    driverCandidates.sort((a, b) => {
      const priorityOrder = { 'Fort': 3, 'Moyen': 2, 'Faible': 1 };
      return priorityOrder[b.profil] - priorityOrder[a.profil];
    });

    // Appliquer la rotation si disponible
    const rotationDriver = rotationState.currentDrivers[vehicleName];
    if (rotationDriver && driverCandidates.find(c => c.id === rotationDriver)) {
      return driverCandidates.find(c => c.id === rotationDriver);
    }

    // Sinon prendre le premier selon la priorit√©
    return driverCandidates[0];
  },

  /**
   * S√©lectionner un membre d'√©quipe (√©quipier/assistant)
   */
  _selectTeamMember(availableEmployees, competences, vehicleId) {
    if (availableEmployees.length === 0) return null;

    // Prioriser le mix profils et mentoring
    const sorted = [...availableEmployees].sort((a, b) => {
      // Priorit√© 1: Mix profils (√©viter trop de m√™me niveau)
      // Priorit√© 2: Formation avec autonome (mentoring)
      const aLevel = this._getCompetenceLevel(a.id, vehicleId, competences);
      const bLevel = this._getCompetenceLevel(b.id, vehicleId, competences);
      
      if (aLevel === 'en formation' && bLevel === 'XX') return 1; // Priorit√© au mentoring
      if (aLevel === 'XX' && bLevel === 'en formation') return -1;
      
      // Sinon priorit√© profil
      const priorityOrder = { 'Fort': 3, 'Moyen': 2, 'Faible': 1 };
      return priorityOrder[b.profil] - priorityOrder[a.profil];
    });

    return sorted[0];
  },

  /**
   * Fonctions utilitaires
   */
  _generateWeekDates(startDate) {
    const dates = [];
    const start = new Date(startDate);
    
    for (let i = 0; i < 5; i++) { // Lundi √† Vendredi
      const date = new Date(start);
      date.setDate(start.getDate() + i);
      const dateStr = date.toISOString().split('T')[0];
      dates.push(dateStr);
    }
    
    return dates;
  },

  _getDayName(date) {
    const dayNames = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];
    const day = new Date(date).getDay();
    return dayNames[day];
  },

  _getAvailableEmployees(employees, absences, date) {
    // D√©terminer le jour de la semaine
    const dayOfWeek = new Date(date).toLocaleDateString('fr-FR', { weekday: 'long' }).toLowerCase();
    
    const absentEmployeeIds = absences
      .filter(absence => date >= absence.date_debut && date <= absence.date_fin)
      .map(absence => absence.employee_id);

    const availableEmployees = employees.filter(emp => {
      // 1. Employ√© doit √™tre actif
      if (!emp.actif) return false;
      
      // 2. Employ√© ne doit pas √™tre absent
      if (absentEmployeeIds.includes(emp.id)) return false;
      
      // 3. ‚úÖ NOUVEAU : V√©rifier les horaires personnalis√©s par jour
      const debutField = `${dayOfWeek}_debut`;
      const finField = `${dayOfWeek}_fin`;
      
      // Si l'employ√© n'a pas d'horaires d√©finis pour ce jour, il n'est pas disponible
      if (!emp[debutField] || !emp[finField]) {
        console.log(`‚è∞ ${emp.nom} non disponible ${dayOfWeek} (pas d'horaires d√©finis)`);
        return false;
      }
      
      return true;
    });
    
    console.log(`üìÖ ${dayOfWeek.toUpperCase()} ${date}: ${availableEmployees.length} employ√©s disponibles:`, 
                availableEmployees.map(e => e.nom));
    
    return availableEmployees;
  },

  /**
   * ‚úÖ NOUVEAU : V√©rifier si le service est ferm√© pour une date donn√©e
   */
  _isServiceClosed(absences, date) {
    const fermeture = absences.find(absence => {
      return absence.type_absence === 'Fermeture' &&
             absence.employee_id === null && // Global closure
             date >= absence.date_debut && 
             date <= absence.date_fin;
    });
    
    if (fermeture) {
      console.log(`üö´ SERVICE FERM√â le ${date}: ${fermeture.motif}`);
      return { isClosed: true, reason: fermeture.motif };
    }
    
    return { isClosed: false };
  },

  _getPriorityVehicles(vehicles, dayName) {
    // Ducato prioritaire jeudi PM et vendredi AM
    const ducatoPriority = ['jeudi', 'vendredi'].includes(dayName);
    
    return vehicles.sort((a, b) => {
      if (a.nom === 'Ducato' && ducatoPriority) return -1;
      if (b.nom === 'Ducato' && ducatoPriority) return 1;
      if (a.nom === 'Ducato' && !ducatoPriority) return 1;
      if (b.nom === 'Ducato' && !ducatoPriority) return -1;
      return 0;
    });
  },

  _initializeRotationState(weekDates) {
    return {
      currentDrivers: {}, // vehicleName -> employeeId
      rotationHistory: [],
      competences: [] // sera rempli avec les comp√©tences lors de l'utilisation
    };
  },

  _rotateDrivers(rotationState, availableEmployees) {
    // Logique de rotation tous les 2 jours
    // R√©initialiser les conducteurs actuels pour forcer une nouvelle s√©lection
    console.log('üîÑ Rotation des conducteurs activ√©e - R√©initialisation des assignations');
    
    // Vider les conducteurs actuels pour permettre une nouvelle s√©lection
    Object.keys(rotationState.currentDrivers).forEach(vehicleName => {
      const previousDriver = rotationState.currentDrivers[vehicleName];
      if (previousDriver) {
        console.log(`üîÑ Rotation: ${vehicleName} - Lib√©ration du conducteur pr√©c√©dent (ID: ${previousDriver})`);
        // Ajouter √† l'historique pour √©viter de le reprendre imm√©diatement
        rotationState.rotationHistory.push({
          vehicleName,
          driverId: previousDriver,
          rotatedAt: new Date().toISOString()
        });
      }
    });
    
    // R√©initialiser pour la nouvelle rotation
    rotationState.currentDrivers = {};
  },

  _getCompetentEmployees(vehicleId, employees, competences, employeesUsed) {
    return employees.filter(emp => {
      if (employeesUsed.has(emp.id)) return false;
      
      const competence = competences.find(c => 
        c.employee_id === emp.id && c.vehicule_id === vehicleId
      );
      
      return competence && ['en formation', 'XX'].includes(competence.niveau);
    });
  },

  _isAutonomous(employeeId, employees, competences) {
    // V√©rifier si l'employ√© a le niveau XX sur au moins un v√©hicule
    const autonomousCompetence = competences.find(c => 
      c.employee_id === employeeId && c.niveau === 'XX'
    );
    return !!autonomousCompetence;
  },

  _getCompetenceLevel(employeeId, vehicleId, competences) {
    const competence = competences.find(c => 
      c.employee_id === employeeId && c.vehicule_id === vehicleId
    );
    return competence?.niveau || 'aucune';
  },

  _sortVehiclesByPriority(vehicles, dayName) {
    return [...vehicles].sort((a, b) => {
      // ORDRE CORRECT: Ducato/Crafter/Jumper ‚Üí Transit ‚Üí Caddy
      
      // 1. Ducato en fonction du jour (priorit√© sp√©ciale jeudi/vendredi)
      const ducatoPriority = ['jeudi', 'vendredi'].includes(dayName);
      if (a.nom === 'Ducato' && ducatoPriority) return -1;
      if (b.nom === 'Ducato' && ducatoPriority) return 1;
      
      // 2. Caddy en dernier (moins prioritaire)
      if (a.nom === 'Caddy') return 1;
      if (b.nom === 'Caddy') return -1;
      
      // 3. Transit avant Caddy mais apr√®s les autres v√©hicules
      if (a.nom === 'Transit' && b.nom === 'Caddy') return -1;
      if (b.nom === 'Transit' && a.nom === 'Caddy') return 1;
      if (a.nom === 'Transit') return 1;
      if (b.nom === 'Transit') return -1;
      
      // 4. Ducato en temps normal (moins prioritaire si pas jeudi/vendredi)
      if (a.nom === 'Ducato' && !ducatoPriority) return 1;
      if (b.nom === 'Ducato' && !ducatoPriority) return -1;
      
      // 5. Autres v√©hicules (Crafter, Jumper) en premier
      return 0;
    });
  },

  _adaptMorningToAfternoon(morningPlanning, date, availableEmployees, dayName) {
    const afternoonPlanning = [];
    
    morningPlanning.forEach(entry => {
      // Pour le Caddy, utiliser la logique sp√©ciale avec Elton
      const vehicle = availableEmployees.find(emp => emp.id === entry.employee_id);
      
      // Garder la m√™me √©quipe pour l'apr√®s-midi (simplification)
      afternoonPlanning.push({
        ...entry,
        creneau: 'apres-midi'
      });
    });
    
    return afternoonPlanning;
  },

  _generateMemberNotes(employee, competences, vehicleId) {
    const competence = competences.find(c => 
      c.employee_id === employee.id && c.vehicule_id === vehicleId
    );
    
    const level = competence?.niveau || 'aucune';
    return `${employee.profil} - ${level === 'en formation' ? 'En formation' : 'Autonome'}`;
  },

  async _clearWeekPlanning(startDate) {
    const weekDates = this._generateWeekDates(startDate);
    
    const { data, error } = await supabase
      .from('planning_logistique_new')
      .delete()
      .in('date', weekDates);

    return { data, error };
  },

  async _savePlanningEntries(planningEntries, existingPlanning = []) {
    if (planningEntries.length === 0) {
      return { data: [], error: null };
    }

    // Filtrer les entr√©es qui existent d√©j√†
    const newEntries = planningEntries.filter(entry => {
      return !existingPlanning.some(existing => 
        existing.employee_id === entry.employee_id &&
        existing.vehicule_id === entry.vehicule_id &&
        existing.date === entry.date &&
        existing.creneau === entry.creneau
      );
    });

    if (newEntries.length === 0) {
      console.log('Aucune nouvelle entr√©e √† sauvegarder');
      return { data: [], error: null };
    }

    console.log(`üíæ Sauvegarde de ${newEntries.length} nouvelles entr√©es`);

    const { data, error } = await supabase
      .from('planning_logistique_new')
      .insert(newEntries);

    if (error) {
      console.error('Erreur lors de la sauvegarde:', error);
      return { data: null, error };
    }

    console.log('‚úÖ Sauvegarde r√©ussie');
    return { data, error: null };
  },

  _generatePlaningSummary(planningEntries) {
    const summary = {
      totalAssignments: planningEntries.length,
      daysGenerated: [...new Set(planningEntries.map(e => e.date))].length,
      vehiclesUsed: [...new Set(planningEntries.map(e => e.vehicule_id))].length,
      employeesAssigned: [...new Set(planningEntries.map(e => e.employee_id))].length,
      roleDistribution: {
        conducteurs: planningEntries.filter(e => e.role === 'Conducteur').length,
        equipiers: planningEntries.filter(e => e.role === '√âquipier').length,
        assistants: planningEntries.filter(e => e.role === 'Assistant').length
      }
    };
    
    return summary;
  },

  /**
   * V√©rifier les plannings futurs pour un employ√© (utilis√© pour la suppression)
   */
  async checkFuturePlannings(employeeId) {
    const today = new Date().toISOString().split('T')[0];
    
    const { data, error } = await supabase
      .from('planning_logistique_new')
      .select('date, creneau')
      .eq('employee_id', employeeId)
      .gte('date', today)
      .order('date');

    if (error) {
      console.error('Erreur lors de la v√©rification des plannings futurs:', error);
      return { data: null, error };
    }

    return { data, error: null };
  },

  /**
   * Utilitaire pour ajouter des jours √† une date
   */
  _addDays(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result.toISOString().split('T')[0];
  },

};

export default supabaseLogistique; 