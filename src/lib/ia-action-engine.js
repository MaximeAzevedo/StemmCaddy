import { supabaseAPI } from './supabase.js';
import { supabaseCuisine } from './supabase-cuisine.js';

/**
 * Moteur d'Actions IA pour l'Assistant Cuisine
 * Reconna√Æt les intentions utilisateur et ex√©cute les actions correspondantes
 * CONNECT√â √Ä LA VRAIE BASE DE DONN√âES SUPABASE + CUISINE
 */
export class IAActionEngine {
  constructor() {
    this.patterns = this.initializePatterns();
    this.lastActionId = null;
    console.log('ü§ñ Assistant IA connect√© √† la base de donn√©es r√©elle + cuisine');
  }

  /**
   * Initialiser les patterns de reconnaissance d'intentions
   */
  initializePatterns() {
    return {
      // ========== GESTION DES ABSENCES ==========
      AJOUTER_ABSENCE: [
        /(\w+)\s+(?:est|sera|est en|sera en)?\s*(?:absent|absente|absence|cong√©|maladie|arr√™t)\s*(?:le|du|√† partir du|depuis le)?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i,
        /absence\s+(?:de\s+)?(\w+)\s+(?:le|du|√† partir du)?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i,
        /(\w+)\s+(?:ne sera pas|n'est pas|ne peut pas)\s+(?:l√†|pr√©sent|pr√©sente|disponible)\s+(?:le|du)?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i,
        /planifier\s+(?:l')?absence\s+(?:de\s+)?(\w+)\s+(?:pour\s+)?(?:le\s+)?(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i
      ],

      CHERCHER_REMPLACANT: [
        /qui\s+peut\s+(?:remplacer|prendre\s+la\s+place\s+de)\s+(\w+)/i,
        /rempla√ßant\s+pour\s+(\w+)/i,
        /qui\s+(?:est\s+)?disponible\s+(?:pour\s+)?(?:remplacer\s+)?(\w+)/i,
        /trouve(?:r)?\s+(?:un\s+)?rempla√ßant\s+(?:pour\s+)?(\w+)/i,
        /(\w+)\s+(?:a\s+besoin\s+d'un|needs\s+a)?\s*rempla√ßant/i
      ],

      // ========== GESTION DES COMP√âTENCES ==========
      MODIFIER_COMPETENCE: [
        /(\w+)\s+(?:ma√Ætrise|sait faire|conna√Æt|a appris|peut faire)\s+(?:la\s+|le\s+|les\s+)?(\w+(?:\s+\w+)?)/i,
        /(\w+)\s+(?:a\s+)?(?:niveau|niveau de comp√©tence|skills?)\s+(\d)\s+(?:en\s+|pour\s+|dans\s+)?(\w+(?:\s+\w+)?)/i,
        /(?:mettre\s+√†\s+jour|update)\s+(?:les\s+)?comp√©tences?\s+(?:de\s+)?(\w+)/i,
        /(\w+)\s+(?:est\s+)?(?:maintenant\s+)?(?:expert|experte|bon|bonne|fort|forte)\s+(?:en\s+|dans\s+|pour\s+)?(\w+(?:\s+\w+)?)/i
      ],

      // ========== GESTION DU PLANNING ==========
      GENERER_PLANNING: [
        /(?:g√©n√®re|g√©n√®rer|cr√©er|faire|propose|proposer)\s+(?:le\s+|un\s+)?planning\s*(?:de\s+)?(?:la\s+)?(?:semaine|week)/i,
        /planning\s+(?:pour\s+)?(?:la\s+)?semaine\s+(?:prochaine|du\s+)?(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})?/i,
        /optimise(?:r)?\s+(?:le\s+)?planning/i,
        /(?:planifier|organiser)\s+(?:la\s+)?semaine/i
      ],

      ANALYSER_EQUIPE: [
        /analys(?:e|er)\s+(?:l')?√©quipe/i,
        /(?:comp√©tences|skills)\s+(?:de\s+l')?√©quipe/i,
        /(?:√©tat|overview|aper√ßu)\s+(?:de\s+l')?√©quipe/i,
        /qui\s+sait\s+faire\s+quoi/i,
        /r√©partition\s+(?:des\s+)?comp√©tences/i
      ],

      EQUILIBRER_CHARGE: [
        /√©quilibr(?:e|er)\s+(?:la\s+)?charge/i,
        /r√©partir\s+(?:les\s+)?(?:heures|t√¢ches)/i,
        /optimise(?:r)?\s+(?:la\s+)?charge\s+de\s+travail/i,
        /heures\s+(?:de\s+)?travail\s+√©quitables/i
      ],

      // ========== RECHERCHE ET INFORMATION ==========
      QUI_TRAVAILLE: [
        /qui\s+travaille\s+(?:le\s+|ce\s+)?(\w+)/i,
        /qui\s+(?:est\s+)?(?:de\s+)?service\s+(?:le\s+)?(\w+)/i,
        /planning\s+(?:du\s+|pour\s+le\s+)?(\w+)/i
      ],

      QUI_DISPONIBLE: [
        /qui\s+(?:est\s+)?disponible\s+(?:le\s+|ce\s+)?(\w+)/i,
        /employ√©s?\s+libres?\s+(?:le\s+)?(\w+)/i,
        /(?:liste|qui)\s+(?:des\s+)?disponibilit√©s/i
      ]
    };
  }

  /**
   * Analyser une commande utilisateur et d√©tecter l'intention
   * @param {string} userInput - Commande utilisateur
   * @returns {Object} Intention d√©tect√©e et param√®tres
   */
  analyzeIntent(userInput) {
    const normalizedInput = userInput.trim();
    
    for (const [intent, patterns] of Object.entries(this.patterns)) {
      for (const pattern of patterns) {
        const match = normalizedInput.match(pattern);
        if (match) {
          return {
            intent,
            confidence: 0.9,
            matches: match,
            parameters: this.extractParameters(intent, match)
          };
        }
      }
    }

    // Fallback - intention g√©n√©rale
    return {
      intent: 'GENERAL_QUERY',
      confidence: 0.3,
      matches: [],
      parameters: {}
    };
  }

  /**
   * Extraire les param√®tres selon l'intention d√©tect√©e
   * @param {string} intent - Intention d√©tect√©e
   * @param {Array} matches - R√©sultats de la regex
   * @returns {Object} Param√®tres extraits
   */
  extractParameters(intent, matches) {
    const params = {};

    switch (intent) {
      case 'AJOUTER_ABSENCE':
        params.employeNom = matches[1];
        params.date = this.parseDate(matches[2]);
        params.motif = this.extractReason(matches[0]);
        break;

      case 'CHERCHER_REMPLACANT':
        params.employeNom = matches[1];
        params.date = new Date().toISOString().split('T')[0]; // Aujourd'hui par d√©faut
        break;

      case 'MODIFIER_COMPETENCE':
        params.employeNom = matches[1];
        if (matches.length > 3) {
          params.niveau = parseInt(matches[2]) || 3;
          params.competence = matches[3];
        } else {
          params.competence = matches[2];
          params.niveau = 3; // Niveau par d√©faut
        }
        break;

      case 'GENERER_PLANNING':
        params.semaine = matches[1] ? this.parseDate(matches[1]) : this.getNextMonday();
        break;

      case 'QUI_TRAVAILLE':
      case 'QUI_DISPONIBLE':
        params.date = this.parseDate(matches[1]) || new Date().toISOString().split('T')[0];
        break;

      default:
        // Pas de param√®tres sp√©cifiques pour les autres intentions
        break;
    }

    return params;
  }

  /**
   * Ex√©cuter une action selon l'intention d√©tect√©e
   * @param {string} userInput - Commande utilisateur originale
   * @returns {Promise<Object>} R√©sultat de l'action
   */
  async executeAction(userInput) {
    const startTime = Date.now();
    
    try {
      const analysis = this.analyzeIntent(userInput);
      
      let result;
      switch (analysis.intent) {
        case 'AJOUTER_ABSENCE':
          result = await this.handleAjouterAbsence(analysis.parameters);
          break;
          
        case 'CHERCHER_REMPLACANT':
          result = await this.handleChercherRemplacant(analysis.parameters);
          break;
          
        case 'MODIFIER_COMPETENCE':
          result = await this.handleModifierCompetence(analysis.parameters);
          break;
          
        case 'GENERER_PLANNING':
          result = await this.handleGenererPlanning(analysis.parameters);
          break;
          
        case 'ANALYSER_EQUIPE':
          result = await this.handleAnalyserEquipe(analysis.parameters);
          break;
          
        case 'QUI_TRAVAILLE':
          result = await this.handleQuiTravaille(analysis.parameters);
          break;
          
        case 'QUI_DISPONIBLE':
          result = await this.handleQuiDisponible(analysis.parameters);
          break;
          
        default:
          result = {
            success: false,
            message: "Je n'ai pas compris cette commande. Essayez quelque chose comme 'Marie est absente lundi' ou 'g√©n√®re le planning de la semaine'.",
            data: null
          };
      }

      // Enregistrer l'action pour apprentissage
      await this.logAction({
        type: analysis.intent,
        intent: analysis.intent,
        userInput,
        parametres: analysis.parameters,
        resultat: result,
        statut: result.success ? 'success' : 'error',
        executionTime: Date.now() - startTime,
        userId: 'current_user'
      });

      return {
        ...result,
        intent: analysis.intent,
        confidence: analysis.confidence,
        executionTime: Date.now() - startTime
      };

    } catch (error) {
      console.error('Erreur executeAction:', error);
      return {
        success: false,
        message: `Erreur lors de l'ex√©cution: ${error.message}`,
        data: null,
        error
      };
    }
  }

  // ==================== HANDLERS SP√âCIFIQUES ====================

  /**
   * G√©rer l'ajout d'une absence
   */
  async handleAjouterAbsence(params) {
    try {
      console.log('ü§ñ Ajout absence cuisine:', params);
      
      // Chercher l'employ√© dans la base de donn√©es cuisine
      const { data: employeesCuisine } = await supabaseCuisine.getEmployeesCuisine();
      let employeCuisine = employeesCuisine?.find(ec => 
        ec.employee.nom?.toLowerCase().includes(params.employeNom.toLowerCase()) ||
        ec.employee.prenom?.toLowerCase().includes(params.employeNom.toLowerCase())
      );

      if (!employeCuisine) {
        // Fallback : chercher dans tous les employ√©s
        const { data: employees } = await supabaseAPI.getEmployees();
        const employe = employees?.find(e => 
          e.nom?.toLowerCase().includes(params.employeNom.toLowerCase()) ||
          e.prenom?.toLowerCase().includes(params.employeNom.toLowerCase())
        );
        
        if (!employe) {
          return {
            success: false,
            message: `‚ùå **Employ√© non trouv√© : "${params.employeNom}"**\n\nüîç **V√©rifiez :**\n‚Ä¢ L'orthographe du nom\n‚Ä¢ Que l'employ√© est bien dans la base cuisine\n\nüí° Employ√©s cuisine disponibles : utilisez "Analyser √©quipe" pour voir la liste.`,
            data: null
          };
        }
        
        // Utiliser l'employ√© trouv√© en g√©n√©ral
        employeCuisine = { employee: employe };
      }

      // Cr√©er l'absence avec l'API cuisine si possible, sinon API g√©n√©rale
      const absence = {
        employee_id: employeCuisine.employee.id,
        date_debut: params.date,
        date_fin: params.date,
        type_absence: 'Absent',
        statut: 'Confirm√©e',
        motif: params.motif || 'Absence d√©clar√©e via IA'
      };

      // Essayer d'abord l'API cuisine
      let result = await supabaseCuisine.createAbsenceCuisine(absence);
      
      if (result.error) {
        console.warn('‚ö†Ô∏è API cuisine √©chou√©e, tentative API g√©n√©rale:', result.error);
        // Fallback vers l'API g√©n√©rale
        result = await supabaseAPI.createAbsence(absence);
      }
      
      if (result.error) {
        return {
          success: false,
          message: `‚ùå **Erreur lors de l'ajout de l'absence**\n\n${result.error.message || 'Erreur inconnue'}\n\nüîß Contactez le support technique.`,
          data: null
        };
      }

      // Log de l'action
      await this.logAction({
        intention: 'AJOUTER_ABSENCE',
        parametres: params,
        resultat_succes: true,
        employe_concerne: employeCuisine.employee.id
      });

      return {
        success: true,
        message: `‚úÖ **Absence cuisine enregistr√©e !**\n\nüë®‚Äçüç≥ **${employeCuisine.employee.nom} ${employeCuisine.employee.prenom || ''}** sera absent(e) le **${new Date(params.date).toLocaleDateString('fr-FR')}**\n\nüç≥ **Impact sur la cuisine :**\n‚Ä¢ V√©rification automatique du planning cuisine\n‚Ä¢ Recherche de rempla√ßants par comp√©tences\n‚Ä¢ R√©organisation des postes si n√©cessaire\n\nüí° **Prochaines √©tapes :**\n‚Ä¢ Demandez "Qui peut remplacer ${employeCuisine.employee.nom} ?"\n‚Ä¢ Dites "Optimiser le planning" pour r√©ajustement`,
        data: { absence: result.data, employe: employeCuisine.employee },
        formatType: 'absence_added_cuisine',
        actions: ['refresh_absences', 'check_cuisine_replacements']
      };

    } catch (error) {
      console.error('Erreur handleAjouterAbsence cuisine:', error);
      return {
        success: false,
        message: '‚ùå **Erreur technique**\n\nImpossible d\'ajouter l\'absence cuisine. Contactez le support technique.',
        data: null
      };
    }
  }

  /**
   * G√©rer la recherche de rempla√ßants
   */
  async handleChercherRemplacant(params) {
    try {
      console.log('ü§ñ Recherche rempla√ßant pour:', params.employeNom);
      
      // Chercher l'employ√© absent dans la vraie base de donn√©es
      const { data: employees } = await supabaseAPI.getEmployees();
      const employeAbsent = employees?.find(e => 
        e.nom?.toLowerCase().includes(params.employeNom.toLowerCase()) ||
        e.prenom?.toLowerCase().includes(params.employeNom.toLowerCase())
      );

      if (!employeAbsent) {
        return {
          success: false,
          message: `‚ùå **Employ√© "${params.employeNom}" non trouv√©**\n\nV√©rifiez l'orthographe.`,
          data: null
        };
      }

      // R√©cup√©rer les employ√©s disponibles (ceux qui ne sont pas en absence)
      const { data: absences } = await supabaseAPI.getAbsences(params.date, params.date);
      const employesAbsents = absences?.map(a => a.employee_id) || [];
      
      const employesDisponibles = employees?.filter(emp => 
        emp.id !== employeAbsent.id && 
        !employesAbsents.includes(emp.id)
      ) || [];

      // Scorer les rempla√ßants bas√© sur le profil
      const suggestions = employesDisponibles.map(emp => ({
        id: emp.id,
        nom: emp.nom,
        prenom: emp.prenom || '',
        profil: emp.profil || 'Non d√©fini',
        langues: emp.langues || [],
        permis: emp.permis,
        score: this.calculerScoreCompatibilite(employeAbsent, emp)
      })).sort((a, b) => b.score - a.score).slice(0, 5);

      if (suggestions.length === 0) {
        return {
          success: false,
          message: `‚ùå **Aucun rempla√ßant disponible**\n\nTous les employ√©s sont d√©j√† occup√©s le ${new Date(params.date).toLocaleDateString('fr-FR')}.`,
          data: null
        };
      }

      return {
        success: true,
        message: `üîç **Rempla√ßants trouv√©s pour ${employeAbsent.nom}**\n\nüìã **${suggestions.length} suggestion(s) :**\n${suggestions.map((s, i) => `${i+1}. **${s.nom} ${s.prenom}** (${s.profil}) - Score: ${s.score}%`).join('\n')}\n\nüí° Les scores sont bas√©s sur le profil et les comp√©tences similaires.`,
        data: { suggestions, employeAbsent },
        formatType: 'replacement_suggestions'
      };

    } catch (error) {
      console.error('Erreur handleChercherRemplacant:', error);
      return {
        success: false,
        message: '‚ùå **Erreur technique lors de la recherche**\n\nContactez le support technique.',
        data: null
      };
    }
  }

  /**
   * Calculer un score de compatibilit√© entre deux employ√©s
   */
  calculerScoreCompatibilite(employeAbsent, candidat) {
    let score = 50; // Score de base
    
    // M√™me profil = +30 points
    if (employeAbsent.profil === candidat.profil) {
      score += 30;
    }
    
    // Langues communes = +10 points par langue
    const languesAbsent = employeAbsent.langues || [];
    const languesCandidat = candidat.langues || [];
    const languesCommunes = languesAbsent.filter(l => languesCandidat.includes(l));
    score += languesCommunes.length * 10;
    
    // M√™me statut permis = +10 points
    if (employeAbsent.permis === candidat.permis) {
      score += 10;
    }
    
    return Math.min(score, 100);
  }

  /**
   * G√©rer la modification de comp√©tence
   */
  async handleModifierCompetence(params) {
    try {
      console.log('ü§ñ Modification comp√©tence cuisine:', params);
      
      // Chercher l'employ√© dans la base cuisine
      const { data: employeesCuisine } = await supabaseCuisine.getEmployeesCuisine();
      const employeCuisine = employeesCuisine?.find(ec => 
        ec.employee.nom?.toLowerCase().includes(params.employeNom.toLowerCase()) ||
        ec.employee.prenom?.toLowerCase().includes(params.employeNom.toLowerCase())
      );

      if (!employeCuisine) {
        return {
          success: false,
          message: `‚ùå **Employ√© "${params.employeNom}" non trouv√© en cuisine**\n\nV√©rifiez l'orthographe ou ajoutez d'abord cet employ√© au module cuisine.`,
          data: null
        };
      }

      // Chercher le poste correspondant √† la comp√©tence
      const { data: postes } = await supabaseCuisine.getPostes();
      const poste = postes?.find(p => 
        p.nom.toLowerCase().includes(params.competence.toLowerCase()) ||
        params.competence.toLowerCase().includes(p.nom.toLowerCase())
      );

      if (!poste) {
        const postesDisponibles = postes?.map(p => p.nom).join(', ') || 'Aucun';
        return {
          success: false,
          message: `‚ùå **Poste "${params.competence}" non reconnu**\n\nüç≥ **Postes cuisine disponibles :**\n${postesDisponibles}\n\nüí° Essayez : "Marie ma√Ætrise la cuisine chaude"`,
          data: null
        };
      }

      // Cr√©er ou mettre √† jour la comp√©tence cuisine
      const competenceData = {
        employee_id: employeCuisine.employee.id,
        poste_id: poste.id,
        niveau: 'Form√©',
        date_validation: new Date().toISOString().split('T')[0],
        formateur_id: 1 // ID formateur par d√©faut
      };

      // V√©rifier si la comp√©tence existe d√©j√†
      const { data: competencesExistantes } = await supabaseCuisine.getCompetencesCuisineSimple();
      const competenceExistante = competencesExistantes?.find(c => 
        c.employee_id === employeCuisine.employee.id && c.poste_id === poste.id
      );

      let result;
      if (competenceExistante) {
        // Mettre √† jour
        result = await supabaseCuisine.updateCompetenceCuisine(competenceExistante.id, competenceData);
      } else {
        // Cr√©er nouvelle comp√©tence
        result = await supabaseCuisine.createCompetenceCuisine(competenceData);
      }

      if (result.error) {
        console.warn('‚ö†Ô∏è Erreur sauvegarde comp√©tence cuisine:', result.error);
        return {
          success: false,
          message: `‚ùå **Erreur technique**\n\nImpossible de sauvegarder la comp√©tence.\n\nüîß D√©tails : ${result.error.message}`,
          data: null
        };
      }

      return {
        success: true,
        message: `‚ö° **Comp√©tence cuisine mise √† jour !**\n\nüë®‚Äçüç≥ **${employeCuisine.employee.nom} ${employeCuisine.employee.prenom || ''}** ma√Ætrise maintenant **${poste.nom}**\n\nüéØ **D√©tails :**\n‚Ä¢ Niveau : ${competenceData.niveau}\n‚Ä¢ Date de validation : ${new Date().toLocaleDateString('fr-FR')}\n‚Ä¢ ${competenceExistante ? 'Comp√©tence mise √† jour' : 'Nouvelle comp√©tence ajout√©e'}\n\nüí° **Impact :**\n‚Ä¢ Disponible pour ce poste dans le planning\n‚Ä¢ Pris en compte dans l'optimisation IA\n‚Ä¢ Visible dans l'analyse d'√©quipe`,
        data: { 
          employe: employeCuisine.employee, 
          competence: poste.nom, 
          niveau: competenceData.niveau,
          isUpdate: !!competenceExistante
        },
        formatType: 'competence_updated_cuisine',
        actions: ['refresh_competences', 'update_planning_options']
      };

    } catch (error) {
      console.error('Erreur handleModifierCompetence cuisine:', error);
      return {
        success: false,
        message: '‚ùå **Erreur technique**\n\nImpossible de modifier la comp√©tence cuisine. Contactez le support technique.',
        data: null
      };
    }
  }

  /**
   * G√©rer la g√©n√©ration de planning
   */
  async handleGenererPlanning(params) {
    try {
      console.log('ü§ñ G√©n√©ration planning pour:', params.semaine);
      
      // R√©cup√©rer le planning existant
      const { data: plannings } = await supabaseAPI.getPlanning(
        params.semaine,
        this.addDays(params.semaine, 6)
      );

      const nombreCreneaux = plannings?.length || 0;

      return {
        success: true,
        message: `üéØ **Planning analys√© !**\n\nüìÖ **Semaine du ${new Date(params.semaine).toLocaleDateString('fr-FR')}**\n\nüìä **${nombreCreneaux} cr√©neaux** trouv√©s dans le planning actuel\n\nüí° **Optimisation automatique :** La fonctionnalit√© de g√©n√©ration automatique sera bient√¥t disponible.\n\n‚ñ∂Ô∏è Consultez le module Planning pour voir les d√©tails.`,
        data: { plannings: plannings || [], semaine: params.semaine },
        formatType: 'planning_grid'
      };

    } catch (error) {
      console.error('Erreur handleGenererPlanning:', error);
      return {
        success: false,
        message: '‚ùå **Erreur technique lors de la g√©n√©ration**\n\nContactez le support technique.',
        data: null
      };
    }
  }

  /**
   * Ajouter des jours √† une date
   */
  addDays(dateStr, days) {
    const date = new Date(dateStr);
    date.setDate(date.getDate() + days);
    return date.toISOString().split('T')[0];
  }

  /**
   * Analyser les comp√©tences de l'√©quipe cuisine
   */
  async handleAnalyserEquipe(params) {
    try {
      console.log('ü§ñ Analyse √©quipe cuisine');
      
      // R√©cup√©rer toutes les donn√©es cuisine
      const [employeesRes, postesRes, competencesRes] = await Promise.all([
        supabaseCuisine.getEmployeesCuisineWithCompetences(),
        supabaseCuisine.getPostes(),
        supabaseCuisine.getCompetencesCuisineSimple()
      ]);
      
      if (employeesRes.error || postesRes.error || competencesRes.error) {
        // Fallback vers l'API g√©n√©rale
        console.warn('‚ö†Ô∏è Erreur API cuisine, fallback API g√©n√©rale');
        const { data: employees, error: empError } = await supabaseAPI.getEmployees();
        
        if (empError) {
          return {
            success: false,
            message: `‚ùå **Erreur lors de l'analyse**\n\n${empError.message || 'Impossible de r√©cup√©rer les donn√©es d\'√©quipe'}`,
            data: null
          };
        }

        // Analyse basique avec donn√©es g√©n√©rales
        const totalEmployes = employees?.length || 0;
        const profils = {};
        const langues = {};
        
        employees?.forEach(emp => {
          const profil = emp.profil || 'Non d√©fini';
          profils[profil] = (profils[profil] || 0) + 1;
          
          if (emp.langues && Array.isArray(emp.langues)) {
            emp.langues.forEach(langue => {
              langues[langue] = (langues[langue] || 0) + 1;
            });
          }
        });

        const avecPermis = employees?.filter(emp => emp.permis === true).length || 0;
        const sansPermis = totalEmployes - avecPermis;

        return {
          success: true,
          message: `üìä **Analyse √©quipe (donn√©es g√©n√©rales)**\n\nüë• **${totalEmployes} employ√©s** au total\n\nüè∑Ô∏è **Profils :**\n${Object.entries(profils).map(([profil, count]) => `‚Ä¢ ${profil}: ${count} personne(s)`).join('\n')}\n\nüåç **Langues parl√©es :**\n${Object.entries(langues).map(([langue, count]) => `‚Ä¢ ${langue}: ${count} personne(s)`).join('\n')}\n\nüöó **Permis de conduire :**\n‚Ä¢ Avec permis: ${avecPermis} (${totalEmployes > 0 ? Math.round((avecPermis / totalEmployes) * 100) : 0}%)\n‚Ä¢ Sans permis: ${sansPermis}\n\n‚ö†Ô∏è **Note :** Donn√©es cuisine limit√©es, utilisez le module Cuisine pour plus de d√©tails.`,
          data: { totalEmployes, profils, langues, permis: { avec: avecPermis, sans: sansPermis } },
          formatType: 'team_analysis_basic'
        };
      }

      const employeesCuisine = employeesRes.data || [];
      const postes = postesRes.data || [];
      const competences = competencesRes.data || [];

      // Analyser les donn√©es cuisine
      const totalEmployesCuisine = employeesCuisine.length;
      const profils = {};
      const langues = {};
      const services = {};
      const competencesParPoste = {};

      // Initialiser les compteurs par poste
      postes.forEach(poste => {
        competencesParPoste[poste.nom] = {
          competents: 0,
          employes: []
        };
      });

      // Analyser chaque employ√© cuisine
      employeesCuisine.forEach(empCuisine => {
        const emp = empCuisine.employee;
        
        // Analyser les profils
        const profil = emp.profil || 'Non d√©fini';
        profils[profil] = (profils[profil] || 0) + 1;
        
        // Analyser les langues
        if (emp.langues && Array.isArray(emp.langues)) {
          emp.langues.forEach(langue => {
            langues[langue] = (langues[langue] || 0) + 1;
          });
        }

        // Analyser les services
        const service = empCuisine.service || 'Non d√©fini';
        services[service] = (services[service] || 0) + 1;
      });

      // Analyser les comp√©tences par poste
      competences.forEach(comp => {
        const poste = postes.find(p => p.id === comp.poste_id);
        const employeCuisine = employeesCuisine.find(ec => ec.employee.id === comp.employee_id);
        
        if (poste && employeCuisine) {
          competencesParPoste[poste.nom].competents++;
          competencesParPoste[poste.nom].employes.push({
            nom: employeCuisine.employee.nom,
            prenom: employeCuisine.employee.prenom || '',
            niveau: comp.niveau
          });
        }
      });

      // Statistiques sur les permis
      const avecPermis = employeesCuisine.filter(ec => ec.employee.permis === true).length;
      const sansPermis = totalEmployesCuisine - avecPermis;

      // Calculer la couverture par poste
      const couverturePostes = Object.entries(competencesParPoste)
        .map(([poste, data]) => ({
          poste,
          competents: data.competents,
          taux: totalEmployesCuisine > 0 ? Math.round((data.competents / totalEmployesCuisine) * 100) : 0,
          employes: data.employes
        }))
        .sort((a, b) => b.competents - a.competents);

      const analysisData = {
        totalEmployesCuisine,
        repartitionProfils: profils,
        repartitionLangues: langues,
        repartitionServices: services,
        competencesParPoste,
        couverturePostes,
        permis: {
          avec: avecPermis,
          sans: sansPermis,
          pourcentage: totalEmployesCuisine > 0 ? Math.round((avecPermis / totalEmployesCuisine) * 100) : 0
        }
      };

      // Construire le message de r√©ponse
      let message = `üìä **Analyse compl√®te de l'√©quipe cuisine**\n\nüë®‚Äçüç≥ **${totalEmployesCuisine} employ√©s cuisine** au total\n\n`;

      // Profils
      message += `üè∑Ô∏è **Profils :**\n${Object.entries(profils).map(([profil, count]) => `‚Ä¢ ${profil}: ${count} personne(s)`).join('\n')}\n\n`;

      // Services
      message += `üç≥ **Services :**\n${Object.entries(services).map(([service, count]) => `‚Ä¢ ${service}: ${count} personne(s)`).join('\n')}\n\n`;

      // Comp√©tences par poste (top 3)
      message += `‚≠ê **Comp√©tences par poste :**\n`;
      couverturePostes.slice(0, 3).forEach(cp => {
        message += `‚Ä¢ **${cp.poste}**: ${cp.competents} form√©(s) (${cp.taux}%)\n`;
      });

      // Langues
      if (Object.keys(langues).length > 0) {
        message += `\nüåç **Langues parl√©es :**\n${Object.entries(langues).map(([langue, count]) => `‚Ä¢ ${langue}: ${count} personne(s)`).join('\n')}\n`;
      }

      // Permis
      message += `\nüöó **Permis de conduire :**\n‚Ä¢ Avec permis: ${avecPermis} (${analysisData.permis.pourcentage}%)\n‚Ä¢ Sans permis: ${sansPermis}`;

      // Recommandations
      message += `\n\nüí° **Recommandations :**`;
      
      const postesManquants = couverturePostes.filter(cp => cp.competents === 0);
      if (postesManquants.length > 0) {
        message += `\nüî¥ Former du personnel sur: ${postesManquants.map(p => p.poste).join(', ')}`;
      }
      
      const postesFaibles = couverturePostes.filter(cp => cp.competents > 0 && cp.taux < 30);
      if (postesFaibles.length > 0) {
        message += `\nüü° Renforcer les comp√©tences: ${postesFaibles.map(p => p.poste).join(', ')}`;
      }

      return {
        success: true,
        message,
        data: analysisData,
        formatType: 'team_analysis_cuisine'
      };

    } catch (error) {
      console.error('Erreur handleAnalyserEquipe cuisine:', error);
      return {
        success: false,
        message: '‚ùå **Erreur technique lors de l\'analyse cuisine**\n\nContactez le support technique.',
        data: null
      };
    }
  }

  /**
   * G√©rer "qui travaille"
   */
  async handleQuiTravaille(params) {
    try {
      const { data: plannings } = await supabaseAPI.getPlanningsIA(
        this.getWeekStart(params.date)
      );

      const jour = this.getDayNumber(params.date);
      const planningsJour = plannings?.filter(p => p.jour === jour) || [];

      if (planningsJour.length === 0) {
        return {
          success: false,
          message: `Aucun planning trouv√© pour cette date.`,
          data: null
        };
      }

      return {
        success: true,
        message: `üë• √âquipe de service le ${params.date}:`,
        data: planningsJour,
        formatType: 'daily_schedule'
      };

    } catch (error) {
      return {
        success: false,
        message: `Erreur technique: ${error.message}`,
        data: null
      };
    }
  }

  /**
   * G√©rer "qui est disponible"
   */
  async handleQuiDisponible(params) {
    try {
      const { data, error } = await supabaseAPI.getEmployesDisponibles(params.date);

      if (error) {
        return {
          success: false,
          message: `Erreur lors de la recherche: ${supabaseAPI.formatError(error)}`,
          data: null
        };
      }

      return {
        success: true,
        message: `‚úÖ Employ√©s disponibles le ${params.date}:`,
        data: data,
        formatType: 'available_employees'
      };

    } catch (error) {
      return {
        success: false,
        message: `Erreur technique: ${error.message}`,
        data: null
      };
    }
  }

  // ==================== UTILITAIRES ====================

  /**
   * Enregistrer une action pour l'apprentissage
   */
  async logAction(actionData) {
    try {
      // Pour l'instant, on log juste dans la console
      // En attendant d'avoir la table ia_actions dans la base de donn√©es
      console.log('üìù Action IA:', actionData);
      this.lastActionId = Date.now(); // Simuler un ID
    } catch (error) {
      console.error('Erreur log action:', error);
    }
  }

  /**
   * Soumettre un feedback sur une action
   */
  async submitFeedback(rating, correction = null) {
    try {
      if (this.lastActionId) {
        console.log('üëç Feedback IA:', { 
          actionId: this.lastActionId, 
          rating, 
          correction 
        });
      }
    } catch (error) {
      console.error('Erreur feedback:', error);
    }
  }

  /**
   * Parser une date en format fran√ßais
   */
  parseDate(dateStr) {
    if (!dateStr) return null;
    
    // Formats support√©s: DD/MM/YYYY, DD-MM-YYYY, DD/MM/YY
    const normalizedDate = dateStr.replace(/[-]/g, '/');
    const parts = normalizedDate.split('/');
    
    if (parts.length === 3) {
      let [day, month, year] = parts;
      
      // G√©rer les ann√©es courtes
      if (year.length === 2) {
        year = '20' + year;
      }
      
      const date = new Date(year, month - 1, day);
      return date.toISOString().split('T')[0];
    }
    
    return null;
  }

  /**
   * Obtenir le lundi de la semaine prochaine
   */
  getNextMonday() {
    const today = new Date();
    const nextMonday = new Date(today);
    nextMonday.setDate(today.getDate() + ((1 + 7 - today.getDay()) % 7));
    return nextMonday.toISOString().split('T')[0];
  }

  /**
   * Obtenir le lundi de la semaine d'une date
   */
  getWeekStart(dateStr) {
    const date = new Date(dateStr);
    const monday = new Date(date);
    monday.setDate(date.getDate() - date.getDay() + 1);
    return monday.toISOString().split('T')[0];
  }

  /**
   * Obtenir le num√©ro du jour (1=Lundi, 7=Dimanche)
   */
  getDayNumber(dateStr) {
    const date = new Date(dateStr);
    return date.getDay() === 0 ? 7 : date.getDay();
  }

  /**
   * Extraire la raison d'une absence du texte
   */
  extractReason(text) {
    if (text.toLowerCase().includes('maladie')) return 'Maladie';
    if (text.toLowerCase().includes('cong√©')) return 'Cong√©s';
    if (text.toLowerCase().includes('formation')) return 'Formation';
    if (text.toLowerCase().includes('personnel')) return 'Personnel';
    return 'Non sp√©cifi√©';
  }

  /**
   * Trouver un employ√© par nom (√† adapter selon votre syst√®me)
   */
  async findEmployeByName(nom) {
    // Pour la d√©monstration, on simule avec des IDs
    // Dans la vraie application, connectez-vous √† votre table employ√©s
    const employesSimules = {
      'marie': 1,
      'paul': 2,
      'julie': 3,
      'jean': 4,
      'sarah': 5
    };
    
    return employesSimules[nom.toLowerCase()] || null;
  }
}

export default IAActionEngine; 