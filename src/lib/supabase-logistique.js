import { supabase } from './supabase';

/**
 * ========================================
 * API LOGISTIQUE SUPABASE
 * ========================================
 * 
 * API sp√©cialis√©e pour la gestion de l'√©quipe logistique
 * Utilise les nouvelles tables : employes_logistique_new, vehicules_logistique, etc.
 */

export const supabaseLogistique = {
  
  // ==================== EMPLOY√âS LOGISTIQUE ====================
  
  /**
   * R√©cup√©rer tous les employ√©s logistique ACTIFS
   */
  async getEmployeesLogistique() {
    try {
      console.log('üìä getEmployeesLogistique - Chargement employ√©s logistique...');
      
      const { data, error } = await supabase
        .from('employes_logistique_new')
        .select('*')
        .eq('actif', true)
        .order('nom');
      
      if (error) {
        console.error('‚ùå Erreur getEmployeesLogistique:', error);
        throw error;
      }

      console.log('‚úÖ Employ√©s logistique charg√©s:', data?.length || 0);
      return { data: data || [], error: null };
      
    } catch (error) {
      console.error('üí• Erreur critique getEmployeesLogistique:', error);
      return { data: [], error };
    }
  },

  /**
   * Mettre √† jour un employ√© logistique
   */
  async updateEmployeeLogistique(id, updates) {
    try {
      const { data, error } = await supabase
        .from('employes_logistique_new')
        .update(updates)
        .eq('id', id)
        .select();
      
      if (error) throw error;
      
      console.log('‚úÖ Employ√© logistique mis √† jour:', data);
      return { data, error: null };
      
    } catch (error) {
      console.error('‚ùå Erreur updateEmployeeLogistique:', error);
      return { data: null, error };
    }
  },

  // ==================== V√âHICULES ====================
  
  /**
   * R√©cup√©rer tous les v√©hicules
   */
  async getVehicules() {
    try {
      console.log('üìä getVehicules - Chargement v√©hicules...');
      
      const { data, error } = await supabase
        .from('vehicules_logistique')
        .select('*')
        .eq('actif', true)
        .order('nom');
      
      if (error) {
        console.error('‚ùå Erreur getVehicules:', error);
        throw error;
      }

      console.log('‚úÖ V√©hicules charg√©s:', data?.length || 0);
      return { data: data || [], error: null };
      
    } catch (error) {
      console.error('üí• Erreur critique getVehicules:', error);
      return { data: [], error };
    }
  },

  // ==================== COMP√âTENCES V√âHICULES ====================
  
  /**
   * R√©cup√©rer les comp√©tences v√©hicules avec employ√©s
   */
  async getCompetencesVehicules() {
    try {
      console.log('üìä getCompetencesVehicules - Chargement comp√©tences...');
      
      const { data, error } = await supabase
        .from('competences_vehicules')
        .select(`
          *,
          employe:employes_logistique_new(id, nom, profil),
          vehicule:vehicules_logistique(id, nom, capacite)
        `)
        .order('employee_id');
      
      if (error) {
        console.error('‚ùå Erreur getCompetencesVehicules:', error);
        throw error;
      }

      console.log('‚úÖ Comp√©tences v√©hicules charg√©es:', data?.length || 0);
      return { data: data || [], error: null };
      
    } catch (error) {
      console.error('üí• Erreur critique getCompetencesVehicules:', error);
      return { data: [], error };
    }
  },

  /**
   * Mettre √† jour une comp√©tence v√©hicule
   */
  async updateCompetenceVehicule(employeeId, vehiculeId, niveau) {
    try {
      console.log('üîß updateCompetenceVehicule:', { employeeId, vehiculeId, niveau });
      
      if (niveau && niveau !== '') {
        // D'abord v√©rifier si l'enregistrement existe d√©j√†
        const { data: existing, error: checkError } = await supabase
          .from('competences_vehicules')
          .select('*')
          .eq('employee_id', employeeId)
          .eq('vehicule_id', vehiculeId)
          .single();
        
        if (checkError && checkError.code !== 'PGRST116') {
          // PGRST116 = "The result contains 0 rows" (pas d'erreur, juste pas de r√©sultat)
          throw checkError;
        }
        
        if (existing) {
          // Mettre √† jour l'enregistrement existant
          const { data, error } = await supabase
            .from('competences_vehicules')
            .update({ niveau: niveau })
            .eq('employee_id', employeeId)
            .eq('vehicule_id', vehiculeId)
            .select();
          
          if (error) throw error;
          console.log('‚úÖ Comp√©tence v√©hicule mise √† jour:', data);
          return { data, error: null };
        } else {
          // Cr√©er un nouvel enregistrement
          const { data, error } = await supabase
            .from('competences_vehicules')
            .insert({
              employee_id: employeeId,
              vehicule_id: vehiculeId,
              niveau: niveau
            })
            .select();
          
          if (error) throw error;
          console.log('‚úÖ Comp√©tence v√©hicule cr√©√©e:', data);
          return { data, error: null };
        }
      } else {
        // Supprimer la comp√©tence
        const { data, error } = await supabase
          .from('competences_vehicules')
          .delete()
          .eq('employee_id', employeeId)
          .eq('vehicule_id', vehiculeId);
        
        if (error) throw error;
        console.log('‚úÖ Comp√©tence v√©hicule supprim√©e');
        return { data, error: null };
      }
      
    } catch (error) {
      console.error('‚ùå Erreur updateCompetenceVehicule:', error);
      return { data: null, error };
    }
  },

  // ==================== PLANNING LOGISTIQUE ====================
  
  /**
   * Sauvegarder le planning hebdomadaire
   */
  async savePlanningHebdomadaire(planningData, weekStart) {
    try {
      console.log('üíæ Sauvegarde planning hebdomadaire...');
      
      // Calculer les dates de la semaine
      const weekDates = [];
      for (let i = 0; i < 5; i++) {
        const date = new Date(weekStart);
        date.setDate(date.getDate() + i);
        weekDates.push(date.toISOString().split('T')[0]);
      }
      
      // Supprimer l'ancien planning pour cette semaine
      const { error: deleteError } = await supabase
        .from('planning_logistique_new')
        .delete()
        .in('date', weekDates);
      
      if (deleteError) {
        console.error('‚ùå Erreur suppression ancien planning:', deleteError);
        throw deleteError;
      }
      
      // Mapper les r√¥les vers les valeurs autoris√©es en base
      const mapRole = (role) => {
        switch (role?.toLowerCase()) {
          case 'conducteur':
            return 'Conducteur';
          case 'assistant':
            return 'Assistant';
          case 'convoyeur':
          case 'equipier':
          default:
            return '√âquipier';
        }
      };
      
      // Pr√©parer les donn√©es √† ins√©rer
      const insertData = [];
      
      Object.entries(planningData).forEach(([dateKey, vehiclesPlanning]) => {
        Object.entries(vehiclesPlanning).forEach(([vehicleId, employees]) => {
          // üîß CORRECTION : Ignorer la section "absents" qui n'est pas un v√©hicule
          if (vehicleId === 'absents' || !Array.isArray(employees)) {
            return; // Passer √† l'it√©ration suivante
          }
          
          const parsedVehicleId = parseInt(vehicleId);
          if (isNaN(parsedVehicleId)) {
            console.warn(`‚ö†Ô∏è ID v√©hicule invalide ignor√©: ${vehicleId}`);
            return;
          }
          
          employees.forEach((employee, index) => {
            // V√©rifier que l'employ√© a un ID valide
            if (!employee.id || isNaN(parseInt(employee.id))) {
              console.warn(`‚ö†Ô∏è Employ√© avec ID invalide ignor√©:`, employee);
              return;
            }
            
            // Cr√©er une entr√©e pour le matin
            insertData.push({
              employee_id: parseInt(employee.id),
              vehicule_id: parsedVehicleId,
              date: dateKey,
              creneau: 'matin',
              role: mapRole(employee.role),
              notes: null,
              absent: false // S'assurer que ce ne sont pas des absents
            });
            
            // Cr√©er une entr√©e pour l'apr√®s-midi
            insertData.push({
              employee_id: parseInt(employee.id),
              vehicule_id: parsedVehicleId,
              date: dateKey,
              creneau: 'apres-midi',
              role: mapRole(employee.role),
              notes: null,
              absent: false // S'assurer que ce ne sont pas des absents
            });
          });
        });
      });
      
      // Ins√©rer le nouveau planning
      if (insertData.length > 0) {
        const { data, error: insertError } = await supabase
          .from('planning_logistique_new')
          .insert(insertData)
          .select();
        
        if (insertError) {
          console.error('‚ùå Erreur insertion planning:', insertError);
          throw insertError;
        }
        
        console.log('‚úÖ Planning sauvegard√©:', data?.length, 'assignations');
        return { data, error: null };
      } else {
        console.log('‚ÑπÔ∏è Aucune assignation √† sauvegarder');
        return { data: [], error: null };
      }
      
    } catch (error) {
      console.error('üí• Erreur critique sauvegarde planning:', error);
      return { data: null, error };
    }
  },

  /**
   * Charger le planning hebdomadaire existant
   */
  async loadPlanningHebdomadaire(weekStart) {
    try {
      console.log('üìä Chargement planning hebdomadaire...');
      
      // Calculer les dates de la semaine
      const weekDates = [];
      for (let i = 0; i < 5; i++) {
        const date = new Date(weekStart);
        date.setDate(date.getDate() + i);
        weekDates.push(date.toISOString().split('T')[0]);
      }
      
      const { data, error } = await supabase
        .from('planning_logistique_new')
        .select(`
          *,
          employe:employes_logistique_new(id, nom, profil, permis, langues),
          vehicule:vehicules_logistique(id, nom, capacite, couleur)
        `)
        .in('date', weekDates)
        .order('date')
        .order('vehicule_id');
      
      if (error) {
        console.error('‚ùå Erreur chargement planning:', error);
        throw error;
      }
      
      // Restructurer les donn√©es au format attendu par l'interface
      const planningFormatted = {};
      
      weekDates.forEach(date => {
        planningFormatted[date] = {
          absents: [] // üîß CORRECTION : Initialiser la section absents pour chaque jour
        };
      });
      
      if (data && data.length > 0) {
        // Grouper par employ√© pour √©viter les doublons (matin + apr√®s-midi = 1 assignation)
        const employeeAssignments = new Map();
        
        data.forEach(assignment => {
          // üîß CORRECTION : Ignorer les lignes marqu√©es comme absentes dans le planning normal
          if (assignment.absent === true) {
            return; // Les absents sont g√©r√©s s√©par√©ment par getAbsencesLogistique
          }
          
          const key = `${assignment.date}-${assignment.employee_id}-${assignment.vehicule_id}`;
          
          if (!employeeAssignments.has(key)) {
            employeeAssignments.set(key, {
              ...assignment.employe,
              status: 'assigned',
              role: assignment.role?.toLowerCase() || 'equipier'
            });
          }
        });
        
        // R√©partir les assignations uniques dans le planning
        data.forEach(assignment => {
          // üîß CORRECTION : Ignorer les absents dans le planning normal
          if (assignment.absent === true) {
            return;
          }
          
          const dateKey = assignment.date;
          const vehicleId = assignment.vehicule_id;
          const key = `${assignment.date}-${assignment.employee_id}-${assignment.vehicule_id}`;
          
          if (!planningFormatted[dateKey]) {
            planningFormatted[dateKey] = {
              absents: []
            };
          }
          
          if (!planningFormatted[dateKey][vehicleId]) {
            planningFormatted[dateKey][vehicleId] = [];
          }
          
          // Ajouter l'employ√© seulement s'il n'est pas d√©j√† dans cette case
          const employeeAlreadyAdded = planningFormatted[dateKey][vehicleId].some(
            emp => emp.id === assignment.employee_id
          );
          
          if (!employeeAlreadyAdded && employeeAssignments.has(key)) {
            planningFormatted[dateKey][vehicleId].push(employeeAssignments.get(key));
          }
        });
      }
      
      console.log('‚úÖ Planning charg√©:', Object.keys(planningFormatted).length, 'jours');
      return { data: planningFormatted, error: null };
      
    } catch (error) {
      console.error('üí• Erreur critique chargement planning:', error);
      return { data: null, error };
    }
  },

  /**
   * R√©cup√©rer le planning logistique avec jointures
   */
  async getPlanningLogistique(dateDebut = null, dateFin = null) {
    try {
      console.log('üìä getPlanningLogistique - Chargement planning...');
      
      let query = supabase
        .from('planning_logistique_new')
        .select(`
          *,
          employe:employes_logistique_new(id, nom, profil),
          vehicule:vehicules_logistique(id, nom, capacite, couleur)
        `);
        
      if (dateDebut) {
        if (dateFin) {
          query = query.gte('date', dateDebut).lte('date', dateFin);
        } else {
          query = query.eq('date', dateDebut);
        }
      }
      
      const { data, error } = await query.order('date').order('creneau');
      
      if (error) {
        console.error('‚ùå Erreur getPlanningLogistique:', error);
        throw error;
      }

      console.log('‚úÖ Planning logistique charg√©:', data?.length || 0);
      return { data: data || [], error: null };
      
    } catch (error) {
      console.error('üí• Erreur critique getPlanningLogistique:', error);
      return { data: [], error };
    }
  },

  // =================== ABSENCES LOGISTIQUE ===================
  
  /**
   * Obtenir toutes les absences de la semaine depuis la vraie table absences
   * üëÅÔ∏è LECTURE SEULE - Affichage uniquement dans le planning
   */
  async getAbsencesLogistique(dateDebut = null, dateFin = null) {
    try {
      // Si aucune date fournie, prendre une plage large pour avoir toutes les absences
      if (!dateDebut || !dateFin) {
        const today = new Date();
        const past = new Date(today);
        past.setDate(past.getDate() - 365); // 1 an en arri√®re
        const future = new Date(today);
        future.setDate(future.getDate() + 365); // 1 an en avant
        
        dateDebut = past.toISOString().split('T')[0];
        dateFin = future.toISOString().split('T')[0];
      }

      const { data, error } = await supabase
        .from('absences_logistique_new')
        .select(`
          id,
          employee_id,
          date_debut,
          date_fin,
          type_absence,
          motif,
          employes_logistique_new (
            id,
            nom,
            profil
          )
        `)
        .gte('date_debut', dateDebut)
        .lte('date_fin', dateFin)
        .order('date_debut', { ascending: false });

      if (error) throw error;

      // Formatter pour l'affichage dans le planning
      const formattedData = data.map(item => ({
        id: item.id,
        employee_id: item.employee_id,
        date_debut: item.date_debut,
        date_fin: item.date_fin,
        type_absence: item.type_absence || 'Absent',
        motif: item.motif,
        employee_name: item.employes_logistique_new?.nom || 'Inconnu',
        employee: item.employes_logistique_new // Donn√©es compl√®tes employ√© pour affichage
      }));

      console.log('‚úÖ Absences logistique charg√©es (lecture seule):', formattedData.length);
      return { data: formattedData, error: null };
    } catch (error) {
      console.error('‚ùå Erreur getAbsencesLogistique:', error);
      return { data: [], error };
    }
  },

  /**
   * Ajouter une nouvelle absence
   */
  async addAbsence(absenceData) {
    try {
      const { data, error } = await supabase
        .from('absences_logistique_new')
        .insert([absenceData])
        .select(`
          *,
          employes_logistique_new (
            id,
            nom,
            profil
          )
        `);

      if (error) throw error;

      console.log('‚úÖ Absence ajout√©e:', data);
      return { data: data[0], error: null };
    } catch (error) {
      console.error('‚ùå Erreur addAbsence:', error);
      return { data: null, error };
    }
  },

  /**
   * Modifier une absence existante
   */
  async updateAbsence(absenceId, updates) {
    try {
      const { data, error } = await supabase
        .from('absences_logistique_new')
        .update(updates)
        .eq('id', absenceId)
        .select(`
          *,
          employes_logistique_new (
            id,
            nom,
            profil
          )
        `);

      if (error) throw error;

      console.log('‚úÖ Absence modifi√©e:', data);
      return { data: data[0], error: null };
    } catch (error) {
      console.error('‚ùå Erreur updateAbsence:', error);
      return { data: null, error };
    }
  },

  /**
   * Supprimer une absence
   */
  async deleteAbsence(absenceId) {
    try {
      const { data, error } = await supabase
        .from('absences_logistique_new')
        .delete()
        .eq('id', absenceId);

      if (error) throw error;

      console.log('‚úÖ Absence supprim√©e');
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Erreur deleteAbsence:', error);
      return { data: null, error };
    }
  }

};

export default supabaseLogistique; 