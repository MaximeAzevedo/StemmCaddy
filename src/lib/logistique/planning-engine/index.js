/**
 * üöÄ MOTEUR DE PLANNING LOGISTIQUE - VERSION SIMPLIFI√âE
 * R√®gles claires et productives pour g√©n√©ration automatique
 */

import { getAvailableEmployees, isServiceClosed, getDayName } from './availability.js';
import {
  VEHICULES_PRIORITE,
  ENCADRANTS,
  CAPACITES_VEHICULES,
  ASSIGNATIONS_SPECIALES,
  separateEncadrantsFromEmployees,
  assignAllEncadrants,
  isEncadrant,
  selectBestConducteur,
  selectConducteurWithRotation, // ‚úÖ NOUVEAU : Pour la rotation des conducteurs
  getEmployesDisponibles,
  validateEquipeSimple
} from './simple-rules.js';

/**
 * G√©n√®re le planning pour une semaine compl√®te - VERSION SIMPLIFI√âE
 */
export async function generateWeeklyPlanning(startDate, employees, vehicles, competences, absences, options = {}) {
  console.log('üöÄ D√âMARRAGE G√âN√âRATION PLANNING - Version simplifi√©e');
  
  const weekDates = generateWeekDates(startDate);
  const planningEntries = [];
  
  console.log('üìÖ Semaine √† traiter:', weekDates);
  
  // G√©n√©rer le planning pour chaque jour
  for (const date of weekDates) {
    const dayName = getDayName(date);
    console.log(`\nüìÖ === G√âN√âRATION ${dayName.toUpperCase()} ${date} ===`);
    
    // V√©rifier si le service est ferm√©
    const serviceStatus = isServiceClosed(absences, date);
    if (serviceStatus.isClosed) {
      console.log(`üö´ Service ferm√© - G√©n√©ration ignor√©e: ${serviceStatus.reason}`);
      continue;
    }
    
    // R√©cup√©rer les employ√©s disponibles (incluant encadrants)
    const availablePersons = getAvailableEmployees(employees, absences, date);
    if (availablePersons.length === 0) {
      console.warn(`‚ö†Ô∏è Aucune personne disponible le ${dayName}`);
      continue;
    }
    
    console.log(`üë• Personnes disponibles le ${dayName}: ${availablePersons.length}`);
    console.log(`üìã Liste:`, availablePersons.map(p => p.nom).join(', '));
    
    try {
      // G√©n√©rer planning matin et apr√®s-midi avec nouvelles r√®gles
      const morningPlanning = await generateDayPlanningSimple(
        availablePersons, vehicles, date, 'matin', dayName
      );
      
      const afternoonPlanning = await generateDayPlanningSimple(
        availablePersons, vehicles, date, 'apres-midi', dayName
      );
      
      planningEntries.push(...morningPlanning, ...afternoonPlanning);
      
    } catch (error) {
      console.error(`‚ùå Erreur g√©n√©ration ${dayName}:`, error);
      throw error;
    }
  }
  
  // Validation finale simplifi√©e
  const finalValidation = validateWeeklyPlanningSimple(planningEntries);
  console.log('üéØ VALIDATION FINALE:', finalValidation);
  
  return {
    success: true,
    planningEntries,
    validation: finalValidation,
    summary: {
      totalDays: weekDates.length,
      totalEntries: planningEntries.length,
      employeesUsed: [...new Set(planningEntries.map(e => e.employee_id))].length
    }
  };
}

/**
 * G√©n√®re le planning pour une journ√©e - VERSION SIMPLIFI√âE
 */
async function generateDayPlanningSimple(availablePersons, vehicles, date, creneau, dayName) {
  console.log(`\nüîß G√©n√©ration ${creneau} - ${dayName} (R√àGLES SIMPLIFI√âES)`);
  
  const planning = [];
  const employeesUsed = new Set();
  
  // üéØ √âTAPE 0 : S√âPARER ENCADRANTS ET EMPLOY√âS
  console.log('\nüîÑ === S√âPARATION ENCADRANTS/EMPLOY√âS ===');
  const { encadrants, employees } = separateEncadrantsFromEmployees(availablePersons);
  
  // üéØ √âTAPE 1 : ASSIGNER LES ENCADRANTS EN PRIORIT√â ABSOLUE
  console.log('\nüë• === ASSIGNATION PRIORITAIRE ENCADRANTS ===');
  assignAllEncadrants(encadrants, vehicles, planning, employeesUsed, dayName, date, creneau);
  
  // üéØ √âTAPE 2 : Remplir les v√©hicules avec les employ√©s normaux
  console.log('\nüöó === REMPLISSAGE V√âHICULES AVEC EMPLOY√âS ===');
  await fillVehiclesByPriority(employees, vehicles, planning, employeesUsed, date, creneau);
  
  // üéØ √âTAPE 3 : Elton sur Caddy si possible
  console.log('\nüöõ === ASSIGNATIONS SP√âCIALES ===');
  await assignSpecialCases(employees, vehicles, planning, employeesUsed, date, creneau);
  
  // ‚úÖ NOUVEAU : DISTRIBUER LES EMPLOY√âS NON-ASSIGN√âS  
  console.log('\nüîÑ === DISTRIBUTION EMPLOY√âS RESTANTS ===');
  
  // Obtenir tous les employ√©s non-assign√©s
  const employesNonAssignes = getEmployesDisponibles(employees, [], employeesUsed);
  console.log(`üë• Employ√©s non-assign√©s: ${employesNonAssignes.length} (${employesNonAssignes.map(e => e.nom).join(', ')})`);
  
  if (employesNonAssignes.length > 0) {
    // Calculer les places disponibles par v√©hicule
    const sortedVehicles = vehicles
      .filter(v => VEHICULES_PRIORITE.includes(v.nom))
      .sort((a, b) => VEHICULES_PRIORITE.indexOf(a.nom) - VEHICULES_PRIORITE.indexOf(b.nom));

    const vehiculesAvecPlaces = sortedVehicles.map(vehicle => {
      const currentTeam = planning.filter(entry => entry.vehicule_id === vehicle.id);
      const placesLibres = (CAPACITES_VEHICULES[vehicle.nom] || 3) - currentTeam.length;
      return { vehicle, placesLibres };
    }).filter(v => v.placesLibres > 0)
    .sort((a, b) => b.placesLibres - a.placesLibres); // Tri par places libres (d√©croissant)
    
    console.log('üéØ V√©hicules avec places libres:', vehiculesAvecPlaces.map(v => `${v.vehicle.nom}(${v.placesLibres})`));
    
    // Distribuer les employ√©s restants
    let employeIndex = 0;
    for (const { vehicle, placesLibres } of vehiculesAvecPlaces) {
      for (let i = 0; i < placesLibres && employeIndex < employesNonAssignes.length; i++) {
        const employe = employesNonAssignes[employeIndex];
        
        planning.push({
          employee_id: employe.id,
          vehicule_id: vehicle.id,
          date: date,
          creneau: creneau,
          role: '√âquipier',
          notes: `üîÑ Distribution finale - ${vehicle.nom}`
        });
        
        employeesUsed.add(employe.id);
        console.log(`‚úÖ Distribution finale: ${employe.nom} ‚Üí ${vehicle.nom}`);
        employeIndex++;
      }
    }
    
    // V√©rifier s'il reste encore des employ√©s
    const employesEncoreNonAssignes = getEmployesDisponibles(employees, [], employeesUsed);
    if (employesEncoreNonAssignes.length > 0) {
      console.warn(`‚ö†Ô∏è ATTENTION: ${employesEncoreNonAssignes.length} employ√©s non-assign√©s:`, 
        employesEncoreNonAssignes.map(e => e.nom));
    } else {
      console.log('‚úÖ TOUS les employ√©s disponibles ont √©t√© assign√©s !');
    }
  }
  
  console.log(`\n‚úÖ ${creneau} termin√©: ${planning.filter(p => p.creneau === creneau).length} assignations`);
  console.log(`üë• Personnes affect√©es: ${employeesUsed.size}/${availablePersons.length}`);
  
  // R√©sum√© par type de r√¥le
  const creneauPlanning = planning.filter(p => p.creneau === creneau);
  const roleCount = {
    Encadrant: creneauPlanning.filter(p => p.notes && p.notes.includes('ENCADRANT FIXE')).length,
    Conducteur: creneauPlanning.filter(p => p.role === 'Conducteur').length,
    Assistant: creneauPlanning.filter(p => p.role === 'Assistant').length,
    √âquipier: creneauPlanning.filter(p => p.role === '√âquipier').length
  };
  console.log(`üìä R√©partition: ${Object.entries(roleCount).map(([role, count]) => `${count} ${role.toLowerCase()}s`).join(', ')}`);
  
  return planning;
}

/**
 * Remplit les v√©hicules dans l'ordre de priorit√© AVEC LES EMPLOY√âS UNIQUEMENT
 */
async function fillVehiclesByPriority(employees, vehicles, planning, employeesUsed, date, creneau) {
  // Trier les v√©hicules selon l'ordre de priorit√©
  const sortedVehicles = vehicles
    .filter(v => VEHICULES_PRIORITE.includes(v.nom))
    .sort((a, b) => VEHICULES_PRIORITE.indexOf(a.nom) - VEHICULES_PRIORITE.indexOf(b.nom));
  
  console.log('üéØ Ordre de remplissage:', sortedVehicles.map(v => v.nom));
  
  for (const vehicle of sortedVehicles) {
    console.log(`\nüöê === REMPLISSAGE ${vehicle.nom.toUpperCase()} ===`);
    
    // V√©rifier combien de places sont d√©j√† prises (par les encadrants)
    const currentTeam = planning.filter(entry => entry.vehicule_id === vehicle.id);
    const placesLibres = (CAPACITES_VEHICULES[vehicle.nom] || 3) - currentTeam.length;
    
    console.log(`üìä ${vehicle.nom}: ${currentTeam.length} d√©j√† assign√©s (encadrants), ${placesLibres} places libres`);
    
    if (placesLibres <= 0) {
      console.log(`‚úÖ ${vehicle.nom} d√©j√† complet (encadrants)`);
      continue;
    }
    
    // Obtenir les employ√©s disponibles (JAMAIS d'encadrants)
    const employesDisponibles = getEmployesDisponibles(employees, [], employeesUsed);
    
    if (employesDisponibles.length === 0) {
      console.log(`‚ö†Ô∏è Plus d'employ√©s disponibles pour ${vehicle.nom}`);
      continue;
    }
    
    console.log(`üë• Employ√©s disponibles pour ${vehicle.nom}:`, employesDisponibles.map(e => e.nom));
    
    // üéØ √âTAPE 1 : Assigner un conducteur si n√©cessaire  
    const hasConducteur = currentTeam.some(member => member.role === 'Conducteur');
    const hasEncadrant = currentTeam.some(member => member.role === 'Encadrant');
    
    if (!hasConducteur && placesLibres > 0) {
      const conducteur = selectConducteurWithRotation(employesDisponibles, vehicle.nom, date); // ‚úÖ ROTATION
      if (conducteur) {
        planning.push({
          employee_id: conducteur.id,
          vehicule_id: vehicle.id,
          date: date,
          creneau: creneau,
          role: 'Conducteur',
          notes: `Conducteur ${vehicle.nom} (${conducteur.profil})`
        });
        
        employeesUsed.add(conducteur.id);
        console.log(`üöó Conducteur: ${conducteur.nom} ‚Üí ${vehicle.nom}`);
      } else if (!hasEncadrant) {
        console.warn(`‚ö†Ô∏è Aucun conducteur disponible pour ${vehicle.nom}`);
      }
    }
    
    // üéØ √âTAPE 2 : Compl√©ter avec des assistants/√©quipiers
    const updatedTeam = planning.filter(entry => entry.vehicule_id === vehicle.id);
    const placesRestantes = (CAPACITES_VEHICULES[vehicle.nom] || 3) - updatedTeam.length;
    
    const employesRestants = getEmployesDisponibles(employees, [], employeesUsed);
    const placesToFill = Math.min(placesRestantes, employesRestants.length);
    
    for (let i = 0; i < placesToFill; i++) {
      const employe = employesRestants[i];
      const role = i === 0 && !updatedTeam.some(m => m.role === 'Assistant') ? 'Assistant' : '√âquipier';
      
      planning.push({
        employee_id: employe.id,
        vehicule_id: vehicle.id,
        date: date,
        creneau: creneau,
        role: role,
        notes: `${role} ${vehicle.nom} (${employe.profil})`
      });
      
      employeesUsed.add(employe.id);
      console.log(`üë§ ${role}: ${employe.nom} ‚Üí ${vehicle.nom}`);
    }
    
    // Valider l'√©quipe
    const finalTeam = planning.filter(entry => entry.vehicule_id === vehicle.id);
    const validation = validateEquipeSimple(finalTeam, vehicle.nom);
    if (validation.warnings.length > 0) {
      console.warn(`‚ö†Ô∏è ${vehicle.nom}:`, validation.warnings);
    } else {
      console.log(`‚úÖ ${vehicle.nom}: √âquipe valide (${finalTeam.length} membres)`);
    }
  }
}

/**
 * G√®re les assignations sp√©ciales (Elton ‚Üí Caddy)
 */
async function assignSpecialCases(employees, vehicles, planning, employeesUsed, date, creneau) {
  // Elton sur Caddy si pr√©sent et place disponible
  const elton = employees.find(emp => 
    (emp.nom === 'Elton' || emp.prenom === 'Elton') && !employeesUsed.has(emp.id)
  );
  
  const caddy = vehicles.find(v => v.nom === 'Caddy');
  
  if (elton && caddy) {
    const caddyTeam = planning.filter(entry => entry.vehicule_id === caddy.id);
    const placesLibres = (CAPACITES_VEHICULES['Caddy'] || 3) - caddyTeam.length;
    
    if (placesLibres > 0) {
      planning.push({
        employee_id: elton.id,
        vehicule_id: caddy.id,
        date: date,
        creneau: creneau,
        role: '√âquipier',
        notes: 'Assignation sp√©ciale Caddy - Elton'
      });
      
      employeesUsed.add(elton.id);
      console.log(`üöõ Elton ‚Üí Caddy (assignation sp√©ciale)`);
    }
  }
}

/**
 * Valide le planning de toute la semaine - VERSION SIMPLIFI√âE
 */
function validateWeeklyPlanningSimple(weeklyPlanning) {
  const summary = {
    totalEntries: weeklyPlanning.length,
    vehiclesUsed: [...new Set(weeklyPlanning.map(e => e.vehicule_id))].length,
    employeesUsed: [...new Set(weeklyPlanning.map(e => e.employee_id))].length,
    encadrantsAssigned: weeklyPlanning.filter(e => e.role === 'Encadrant').length,
    conducteursAssigned: weeklyPlanning.filter(e => e.role === 'Conducteur').length
  };
  
  return {
    isValid: true, // Version simplifi√©e = toujours valide
    summary,
    message: '‚úÖ Planning g√©n√©r√© avec succ√®s - R√®gles simplifi√©es'
  };
}

/**
 * G√©n√®re les dates d'une semaine
 */
function generateWeekDates(startDate) {
  const dates = [];
  const current = new Date(startDate);
  
  // G√©n√©rer du lundi au vendredi
  for (let i = 0; i < 5; i++) {
    dates.push(current.toISOString().split('T')[0]);
    current.setDate(current.getDate() + 1);
  }
  
  return dates;
} 