import { useState, useCallback } from 'react';
import { format } from 'date-fns';
import { supabaseCuisine } from '../../lib/supabase-cuisine';
import { usePlanningData as usePlanningContext } from '../../contexts/PlanningDataContext';

/**
 * Hook pour la gestion du chargement des donn√©es m√©tier du planning
 * Version hybride : charge donn√©es m√©tier DB, planning g√©r√© en localStorage
 */
export const usePlanningDataLoader = (selectedDate, currentSession) => {
  const [loading, setLoading] = useState(true);
  const [postes, setPostes] = useState([]);
  const { updatePlanningData } = usePlanningContext();

  /**
   * Chargement des donn√©es m√©tier (sans planning DB)
   */
  const loadData = useCallback(async () => {
    try {
      setLoading(true);
      const dateStr = format(selectedDate, 'yyyy-MM-dd');
      
      // Charger uniquement les donn√©es m√©tier (pas le planning)
      const [postesRes, employeesRes, absencesRes, competencesRes] = await Promise.all([
        supabaseCuisine.getPostes(),
        supabaseCuisine.getEmployeesCuisine(),
        supabaseCuisine.getAbsencesCuisine(dateStr, dateStr),
        supabaseCuisine.getCompetencesCuisineSimple()
      ]);

      if (postesRes.error || employeesRes.error) {
        throw new Error('Erreur de chargement des donn√©es m√©tier');
      }

      console.log('üìä DONN√âES M√âTIER charg√©es:', {
        postes: postesRes.data?.length || 0,
        employ√©s: employeesRes.data?.length || 0,
        absences: absencesRes.data?.length || 0,
        comp√©tences: competencesRes.data?.length || 0
      });

      // ‚úÖ Alimenter le contexte partag√© pour le mode TV (sans planning DB)
      updatePlanningData({
        postes: postesRes.data || [],
        employeesCuisine: employeesRes.data || [],
        planning: [], // Planning g√©r√© en localStorage, pas en DB
        absences: absencesRes.data || [],
        selectedDate,
        currentSession,
        loading: false
      });

      // ‚úÖ Construire la map des comp√©tences locale
      const competences = competencesRes.data || [];
      const competencesMap = {};
      competences.forEach(comp => {
        if (!competencesMap[comp.employee_id]) {
          competencesMap[comp.employee_id] = [];
        }
        const poste = (postesRes.data || []).find(p => p.id === comp.poste_id);
        if (poste) {
          competencesMap[comp.employee_id].push(poste.nom);
        }
      });
      console.log('üéØ Comp√©tences charg√©es:', Object.keys(competencesMap).length, 'employ√©s');

      setPostes(postesRes.data || []);
      
      // ‚úÖ CR√âNEAUX CORRECTS selon les sp√©cifications r√©elles
      const creneauxCorrects = [
        '8h-16h',      // Postes standards
        '8h-12h',      // Pain  
        '8h',          // Vaisselle matin
        '10h',         // Vaisselle 10h
        'midi',        // Vaisselle midi
        '11h-11h45',   // Self Midi service 1
        '11h45-12h45'  // Self Midi service 2
      ];
      
      return {
        postes: postesRes.data || [],
        creneaux: creneauxCorrects,
        employees: employeesRes.data || [],
        planning: [], // Pas de planning DB, g√©r√© en base partag√©e
        absences: absencesRes.data || [],
        competencesMap
      };
      
    } catch (err) {
      console.error('Erreur chargement donn√©es m√©tier:', err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [selectedDate, currentSession, updatePlanningData]);

  /**
   * Diagnostic de donn√©es m√©tier
   */
  const runDataDiagnostic = useCallback(async () => {
    try {
      console.log('üîç DIAGNOSTIC : DONN√âES M√âTIER - D√âBUT');
      const dateStr = format(selectedDate, 'yyyy-MM-dd');
      
      console.log(`üìÖ Date s√©lectionn√©e: ${dateStr}`);
      console.log(`‚è∞ Session courante: ${currentSession}`);
      
      // √âTAPE 1: V√©rifier les postes
      const { data: postesData, error: postesError } = await supabaseCuisine.getPostes();
      console.log('üìä POSTES:', {
        count: postesData?.length || 0,
        error: postesError,
        postes: postesData?.map(p => p.nom) || []
      });
      
      // √âTAPE 2: V√©rifier les employ√©s cuisine
      const { data: employeesData, error: empError } = await supabaseCuisine.getEmployeesCuisine();
      console.log('üë• EMPLOY√âS CUISINE:', {
        count: employeesData?.length || 0,
        error: empError,
        // üîß CORRECTION : Structure directe ec.actif au lieu de ec.employee.statut
        actifs: employeesData?.filter(e => e.actif !== false).length || 0,
        noms: employeesData?.slice(0, 5).map(e => e.prenom) || []
      });
      
      // √âTAPE 3: V√©rifier les comp√©tences
      const { data: competencesData, error: compError } = await supabaseCuisine.getCompetencesCuisineSimple();
      console.log('üéØ COMP√âTENCES:', {
        count: competencesData?.length || 0,
        error: compError
      });
      
      // √âTAPE 4: V√©rifier les absences
      const { data: absencesData, error: absError } = await supabaseCuisine.getAbsencesCuisine(dateStr, dateStr);
      console.log('‚ùå ABSENCES:', {
        count: absencesData?.length || 0,
        error: absError,
        // üîß CORRECTION : Pas de statut dans les absences selon la vraie structure
        dateDuJour: absencesData?.filter(a => 
          a.date_debut <= dateStr && a.date_fin >= dateStr
        ).length || 0
      });
      
      console.log('üìã R√âSUM√â DIAGNOSTIC:');
      console.log(`   ‚úÖ Postes: ${postesData?.length || 0}`);
      console.log(`   ‚úÖ Employ√©s actifs: ${employeesData?.filter(e => e.actif !== false).length || 0}`);
      console.log(`   ‚úÖ Comp√©tences: ${competencesData?.length || 0}`);
      console.log(`   ‚ö†Ô∏è Absences du jour: ${absencesData?.filter(a => 
        a.date_debut <= dateStr && a.date_fin >= dateStr
      ).length || 0}`);
      console.log('   üíæ Planning: G√©r√© en localStorage (pas en DB)');
      
      return {
        success: true,
        message: 'Diagnostic termin√© - Donn√©es m√©tier OK',
        data: {
          postes: postesData?.length || 0,
          employees: employeesData?.length || 0,
          competences: competencesData?.length || 0,
          absences: absencesData?.length || 0,
          date: dateStr,
          session: currentSession
        }
      };
      
    } catch (error) {
      console.error('‚ùå DIAGNOSTIC √âCHOU√â:', error);
      return {
        success: false,
        message: 'Erreur lors du diagnostic'
      };
    }
  }, [selectedDate, currentSession]);

  return {
    loading,
    postes,
    loadData,
    runDataDiagnostic
  };
}; 