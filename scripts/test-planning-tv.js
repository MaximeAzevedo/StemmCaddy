const { createClient } = require('@supabase/supabase-js');
require('dotenv/config');

// Configuration Supabase
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testPlanningTV() {
  console.log('üîç TEST MODE TV - Diagnostic complet\n');

  try {
    // 1. V√©rifier les postes de cuisine
    console.log('1Ô∏è‚É£ V√©rification des postes de cuisine...');
    const { data: postes, error: postesError } = await supabase
      .from('postes_cuisine')
      .select('*');
    
    console.log(`   üìç Postes trouv√©s: ${postes?.length || 0}`);
    if (postesError) console.error(`   ‚ùå Erreur postes:`, postesError);
    if (postes?.length === 0) {
      console.log('   ‚ûï Cr√©ation des postes par d√©faut...');
      await createDefaultPostes();
    }

    // 2. V√©rifier les employ√©s de cuisine
    console.log('\n2Ô∏è‚É£ V√©rification des employ√©s de cuisine...');
    const { data: employees, error: empError } = await supabase
      .from('employees_cuisine')
      .select(`
        *,
        employee:employees(*)
      `);
    
    console.log(`   üë• Employ√©s de cuisine trouv√©s: ${employees?.length || 0}`);
    if (empError) console.error(`   ‚ùå Erreur employ√©s:`, empError);
    if (employees?.length === 0) {
      console.log('   ‚ûï Cr√©ation des employ√©s par d√©faut...');
      await createDefaultEmployees();
    }

    // 3. V√©rifier le planning d'aujourd'hui
    const today = new Date().toISOString().split('T')[0];
    console.log(`\n3Ô∏è‚É£ V√©rification du planning pour ${today}...`);
    
    const { data: planning, error: planningError } = await supabase
      .from('planning_cuisine')
      .select('*')
      .eq('date', today);
    
    console.log(`   üìÖ Entr√©es de planning trouv√©es: ${planning?.length || 0}`);
    if (planningError) console.error(`   ‚ùå Erreur planning:`, planningError);
    
    if (planning?.length === 0) {
      console.log('   ‚ûï Cr√©ation du planning de d√©monstration...');
      await createDemoPlanning(today);
    }

    // 4. Test des jointures
    console.log(`\n4Ô∏è‚É£ Test des jointures (planning avec postes et employ√©s)...`);
    const { data: planningWithJoins, error: joinError } = await supabase
      .from('planning_cuisine')
      .select(`
        *,
        employee:employees(*),
        poste:postes_cuisine(*)
      `)
      .eq('date', today);
    
    console.log(`   üîó Planning avec jointures: ${planningWithJoins?.length || 0}`);
    if (joinError) console.error(`   ‚ùå Erreur jointures:`, joinError);

    // 5. Afficher les donn√©es pour debug
    if (planningWithJoins?.length > 0) {
      console.log('\n5Ô∏è‚É£ Donn√©es de planning trouv√©es:');
      planningWithJoins.forEach((item, index) => {
        console.log(`   ${index + 1}. ${item.employee?.nom || 'Employ√© inconnu'} -> ${item.poste?.nom || 'Poste inconnu'} (${item.session}, ${item.creneau})`);
      });
    }

    console.log('\n‚úÖ Diagnostic termin√© ! Le mode TV devrait maintenant afficher des donn√©es.');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  }
}

async function createDefaultPostes() {
  const defaultPostes = [
    { nom: 'Cuisine chaude', couleur: '#FF6B35', icone: 'üî•', description: 'Pr√©paration plats chauds', actif: true, ordre_affichage: 1 },
    { nom: 'Sandwichs', couleur: '#4ECDC4', icone: 'ü•™', description: 'Pr√©paration sandwichs', actif: true, ordre_affichage: 2 },
    { nom: 'Pain', couleur: '#45B7D1', icone: 'üçû', description: 'Boulangerie', actif: true, ordre_affichage: 3 },
    { nom: 'Jus de fruits', couleur: '#96CEB4', icone: 'üßÉ', description: 'Pr√©paration jus et boissons', actif: true, ordre_affichage: 4 },
    { nom: 'Vaisselle', couleur: '#FFEAA7', icone: 'üçΩÔ∏è', description: 'Nettoyage vaisselle', actif: true, ordre_affichage: 5 },
    { nom: 'L√©gumerie', couleur: '#DDA0DD', icone: 'ü•¨', description: 'Pr√©paration l√©gumes', actif: true, ordre_affichage: 6 },
    { nom: 'Self Midi', couleur: '#FF6B35', icone: 'üçΩÔ∏è', description: 'Service self du midi', actif: true, ordre_affichage: 7 },
    { nom: 'Equipe Pina et Saskia', couleur: '#8B5CF6', icone: 'üë•', description: '√âquipe sp√©cialis√©e', actif: true, ordre_affichage: 8 }
  ];

  const { error } = await supabase
    .from('postes_cuisine')
    .insert(defaultPostes);
  
  if (error) {
    console.error('   ‚ùå Erreur cr√©ation postes:', error);
  } else {
    console.log('   ‚úÖ Postes cr√©√©s avec succ√®s');
  }
}

async function createDefaultEmployees() {
  // D'abord cr√©er quelques employ√©s de base s'ils n'existent pas
  const defaultEmployees = [
    { nom: 'Martin', prenom: 'Alice', email: 'alice.martin@caddy.fr', profil: 'Fort', statut: 'Actif' },
    { nom: 'Dupont', prenom: 'Bob', email: 'bob.dupont@caddy.fr', profil: 'Moyen', statut: 'Actif' },
    { nom: 'Durand', prenom: 'Charlie', email: 'charlie.durand@caddy.fr', profil: 'Fort', statut: 'Actif' },
    { nom: 'Pina', prenom: 'Sofia', email: 'sofia.pina@caddy.fr', profil: 'Fort', statut: 'Actif' },
    { nom: 'Saskia', prenom: 'Elena', email: 'elena.saskia@caddy.fr', profil: 'Moyen', statut: 'Actif' }
  ];

  // Ins√©rer dans employees
  const { data: employeesData, error: empError } = await supabase
    .from('employees')
    .upsert(defaultEmployees, { onConflict: 'email' })
    .select();

  if (empError) {
    console.error('   ‚ùå Erreur cr√©ation employ√©s:', empError);
    return;
  }

  // Ins√©rer dans employees_cuisine
  const employeesCuisine = employeesData.map(emp => ({
    employee_id: emp.id,
    photo_url: null,
    service: 'Cuisine'
  }));

  const { error: cuisineError } = await supabase
    .from('employees_cuisine')
    .upsert(employeesCuisine, { onConflict: 'employee_id' });

  if (cuisineError) {
    console.error('   ‚ùå Erreur cr√©ation employ√©s cuisine:', cuisineError);
  } else {
    console.log('   ‚úÖ Employ√©s de cuisine cr√©√©s avec succ√®s');
  }
}

async function createDemoPlanning(date) {
  // R√©cup√©rer les IDs des postes et employ√©s
  const { data: postes } = await supabase.from('postes_cuisine').select('*');
  const { data: employeesCuisine } = await supabase
    .from('employees_cuisine')
    .select('*, employee:employees(*)');

  if (!postes?.length || !employeesCuisine?.length) {
    console.log('   ‚ö†Ô∏è Pas assez de donn√©es pour cr√©er le planning');
    return;
  }

  // Cr√©er un planning de d√©monstration
  const demoPlanning = [];
  
  // Session matin
  if (postes.find(p => p.nom === 'Cuisine chaude') && employeesCuisine[0]) {
    demoPlanning.push({
      employee_id: employeesCuisine[0].employee.id,
      poste_id: postes.find(p => p.nom === 'Cuisine chaude').id,
      date,
      session: 'matin',
      creneau: 'Service'
    });
  }

  if (postes.find(p => p.nom === 'Sandwichs') && employeesCuisine[1]) {
    demoPlanning.push({
      employee_id: employeesCuisine[1].employee.id,
      poste_id: postes.find(p => p.nom === 'Sandwichs').id,
      date,
      session: 'matin',
      creneau: 'Service'
    });
  }

  if (postes.find(p => p.nom === 'Vaisselle') && employeesCuisine[2]) {
    demoPlanning.push({
      employee_id: employeesCuisine[2].employee.id,
      poste_id: postes.find(p => p.nom === 'Vaisselle').id,
      date,
      session: 'matin',
      creneau: '8h'
    });
  }

  if (postes.find(p => p.nom === 'Self Midi') && employeesCuisine[3]) {
    demoPlanning.push({
      employee_id: employeesCuisine[3].employee.id,
      poste_id: postes.find(p => p.nom === 'Self Midi').id,
      date,
      session: 'matin',
      creneau: '11h-11h45'
    });
  }

  // Session apr√®s-midi
  if (postes.find(p => p.nom === 'Cuisine chaude') && employeesCuisine[4]) {
    demoPlanning.push({
      employee_id: employeesCuisine[4].employee.id,
      poste_id: postes.find(p => p.nom === 'Cuisine chaude').id,
      date,
      session: 'apres-midi',
      creneau: 'Service'
    });
  }

  const { error } = await supabase
    .from('planning_cuisine')
    .insert(demoPlanning);

  if (error) {
    console.error('   ‚ùå Erreur cr√©ation planning:', error);
  } else {
    console.log(`   ‚úÖ Planning de d√©monstration cr√©√©: ${demoPlanning.length} assignations`);
  }
}

// Lancer le test
testPlanningTV().catch(console.error); 