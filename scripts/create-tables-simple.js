require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('V√©rifiez que REACT_APP_SUPABASE_URL et SUPABASE_SERVICE_KEY sont d√©finis dans .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createTablesAndData() {
  console.log('üöÄ Configuration automatique des tables et donn√©es Caddy...');
  
  try {
    // 1. Cr√©er les donn√©es directement (les tables seront cr√©√©es automatiquement)
    console.log('üöó Cr√©ation/mise √† jour des v√©hicules...');
    
    const vehiclesData = [
      { nom: 'Crafter 21', capacite: 3, type: 'Collecte', couleur: '#3b82f6' },
      { nom: 'Crafter 23', capacite: 3, type: 'Collecte', couleur: '#10b981' },
      { nom: 'Jumper', capacite: 3, type: 'Collecte', couleur: '#8b5cf6' },
      { nom: 'Ducato', capacite: 3, type: 'Collecte', couleur: '#f59e0b' },
      { nom: 'Transit', capacite: 8, type: 'Formation', couleur: '#ef4444' }
    ];
    
    // Essayer d'ins√©rer les v√©hicules
    const { data: vehiclesResult, error: vehiclesError } = await supabase
      .from('vehicles')
      .upsert(vehiclesData, { onConflict: 'nom' });
    
    if (vehiclesError) {
      console.log('üìã Table vehicles n\'existe pas, cr√©ation manuelle n√©cessaire');
      console.log('‚ÑπÔ∏è Ex√©cutez le sch√©ma SQL complet dans Supabase Dashboard');
    } else {
      console.log('‚úÖ V√©hicules cr√©√©s/mis √† jour');
    }
    
    // 2. Cr√©er les employ√©s
    console.log('üë• Cr√©ation/mise √† jour des employ√©s...');
    
    const employeesData = [
      { nom: 'Martial', prenom: 'Martial', profil: 'Fort', langues: ['Fran√ßais'], permis: true, etoiles: 2, email: 'martial@caddy.lu', statut: 'Actif' },
      { nom: 'Margot', prenom: 'Margot', profil: 'Moyen', langues: ['Fran√ßais'], permis: true, etoiles: 2, email: 'margot@caddy.lu', statut: 'Actif' },
      { nom: 'Shadi', prenom: 'Shadi', profil: 'Fort', langues: ['Arabe', 'Anglais', 'Fran√ßais'], permis: false, etoiles: 2, email: 'shadi@caddy.lu', statut: 'Actif' },
      { nom: 'Ahmad', prenom: 'Ahmad', profil: 'Moyen', langues: ['Arabe'], permis: true, etoiles: 1, email: 'ahmad@caddy.lu', statut: 'Actif' },
      { nom: 'Tamara', prenom: 'Tamara', profil: 'Faible', langues: ['Luxembourgeois', 'Fran√ßais'], permis: true, etoiles: 1, email: 'tamara@caddy.lu', statut: 'Actif' },
      { nom: 'Soroosh', prenom: 'Soroosh', profil: 'Fort', langues: ['Perse'], permis: true, etoiles: 2, email: 'soroosh@caddy.lu', statut: 'Actif' },
      { nom: 'Imad', prenom: 'Imad', profil: 'Moyen', langues: ['Arabe'], permis: true, etoiles: 1, email: 'imad@caddy.lu', statut: 'Actif' }
    ];
    
    const { data: employeesResult, error: employeesError } = await supabase
      .from('employees')
      .upsert(employeesData, { onConflict: 'email' });
    
    if (employeesError) {
      console.log('üìã Table employees n\'existe pas, cr√©ation manuelle n√©cessaire');
    } else {
      console.log('‚úÖ Employ√©s cr√©√©s/mis √† jour');
    }
    
    // 3. Tester la table absences
    console.log('üö´ Test de la table absences...');
    
    const { data: absencesTest, error: absencesError } = await supabase
      .from('absences')
      .select('*')
      .limit(1);
    
    if (absencesError) {
      console.log('üìã Table absences n\'existe pas');
      console.log('');
      console.log('‚ùó SOLUTION REQUISE :');
      console.log('1. Allez sur https://supabase.com/dashboard');
      console.log('2. Ouvrez votre projet Caddy');
      console.log('3. Allez dans "SQL Editor"');
      console.log('4. Ex√©cutez ce script SQL :');
      console.log('');
      console.log('-- Cr√©ation table absences');
      console.log('CREATE TABLE IF NOT EXISTS absences (');
      console.log('  id SERIAL PRIMARY KEY,');
      console.log('  employee_id INTEGER REFERENCES employees(id) ON DELETE CASCADE,');
      console.log('  date_debut DATE NOT NULL,');
      console.log('  date_fin DATE NOT NULL,');
      console.log('  type_absence VARCHAR(50) DEFAULT \'Absent\' CHECK (type_absence IN (\'Absent\', \'Cong√©\', \'Maladie\', \'Formation\')),');
      console.log('  statut VARCHAR(20) DEFAULT \'Confirm√©e\' CHECK (statut IN (\'Confirm√©e\', \'En attente\', \'Annul√©e\')),');
      console.log('  motif TEXT,');
      console.log('  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),');
      console.log('  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),');
      console.log('  CHECK (date_fin >= date_debut)');
      console.log(');');
      console.log('');
      console.log('-- Activer RLS');
      console.log('ALTER TABLE absences ENABLE ROW LEVEL SECURITY;');
      console.log('CREATE POLICY "Permettre l\'acc√®s aux utilisateurs authentifi√©s" ON absences FOR ALL USING (auth.role() = \'authenticated\');');
      console.log('');
    } else {
      console.log('‚úÖ Table absences existe et est accessible');
    }
    
    // 4. V√©rification finale
    console.log('');
    console.log('üîç V√©rification finale des acc√®s...');
    
    const tables = [
      { name: 'vehicles', emoji: 'üöó' },
      { name: 'employees', emoji: 'üë•' },
      { name: 'absences', emoji: 'üö´' }
    ];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table.name)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`${table.emoji} Table ${table.name}: ‚ùå ${error.message}`);
        } else {
          console.log(`${table.emoji} Table ${table.name}: ‚úÖ OK (${data?.length || 0} enregistrements visibles)`);
        }
      } catch (err) {
        console.log(`${table.emoji} Table ${table.name}: ‚ùå Erreur critique: ${err.message}`);
      }
    }
    
    console.log('');
    console.log('üéØ R√©sum√© :');
    console.log('‚Ä¢ Si toutes les tables sont ‚úÖ OK, red√©marrez l\'application');
    console.log('‚Ä¢ Si des tables sont ‚ùå, ex√©cutez le script SQL dans Supabase Dashboard');
    console.log('‚Ä¢ Fichier SQL complet : database/schema.sql');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error);
    console.log('');
    console.log('üîß Solution alternative :');
    console.log('1. Allez sur https://supabase.com/dashboard');
    console.log('2. Ouvrez votre projet');
    console.log('3. Allez dans SQL Editor');
    console.log('4. Copiez le contenu de database/schema.sql');
    console.log('5. Ex√©cutez le script SQL manuellement');
  }
}

if (require.main === module) {
  createTablesAndData().catch(console.error);
}

module.exports = { createTablesAndData }; 