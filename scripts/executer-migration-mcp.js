#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Script pour ex√©cuter la migration via l'interface Supabase
// Plus fiable que l'API JavaScript

async function executer() {
  console.log('üöÄ MIGRATION SCH√âMA CUISINE UNIFI√â\n');
  
  // Lire le fichier SQL
  const sqlFile = path.join(__dirname, '../database/schema-cuisine-unifie.sql');
  
  if (!fs.existsSync(sqlFile)) {
    console.error('‚ùå Fichier SQL non trouv√©:', sqlFile);
    process.exit(1);
  }
  
  const sqlContent = fs.readFileSync(sqlFile, 'utf8');
  
  console.log('üìÑ Fichier SQL charg√©:', sqlFile);
  console.log('üìä Taille:', Math.round(sqlContent.length / 1024), 'KB\n');
  
  // Afficher les instructions
  console.log('üìã INSTRUCTIONS D\'EX√âCUTION:');
  console.log('');
  console.log('1. Ouvrez votre dashboard Supabase:');
  console.log('   üëâ https://supabase.com/dashboard');
  console.log('');
  console.log('2. S√©lectionnez votre projet Caddy');
  console.log('');
  console.log('3. Cliquez sur "SQL Editor" dans le menu de gauche');
  console.log('');
  console.log('4. Copiez le contenu du fichier:');
  console.log('   üëâ', sqlFile);
  console.log('');
  console.log('5. Collez dans l\'√©diteur SQL et cliquez sur "RUN"');
  console.log('');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('');
  
  // Cr√©er un fichier temporaire pour faciliter la copie
  const tempFile = path.join(__dirname, '../migration-temp.sql');
  fs.writeFileSync(tempFile, sqlContent);
  
  console.log('üíæ Fichier temporaire cr√©√© pour faciliter la copie:');
  console.log('   üëâ', tempFile);
  console.log('');
  console.log('üîÑ VOUS POUVEZ AUSSI:');
  console.log('   - Ouvrir ce fichier avec votre √©diteur de texte');
  console.log('   - Copier tout le contenu (Ctrl+A puis Ctrl+C)');
  console.log('   - Coller dans l\'√©diteur SQL de Supabase');
  console.log('');
  
  // Afficher un r√©sum√© de ce qui va √™tre cr√©√©
  console.log('üìä R√âSUM√â DE LA MIGRATION:');
  console.log('');
  console.log('üóÇÔ∏è  NOUVELLES TABLES:');
  console.log('   ‚úÖ employes_cuisine_unifie (profils complets)');
  console.log('   ‚úÖ planning_cuisine_unifie (planning simplifi√©)');  
  console.log('   ‚úÖ absences_cuisine_unifie (absences simplifi√©es)');
  console.log('');
  console.log('üëÅÔ∏è  VUES CR√â√âES:');
  console.log('   ‚úÖ absences_aujourd_hui');
  console.log('   ‚úÖ planning_aujourd_hui');
  console.log('   ‚úÖ competences_employes');
  console.log('');
  console.log('üîß FONCTIONS CR√â√âES:');
  console.log('   ‚úÖ peut_affecter_poste(employee_id, poste)');
  console.log('   ‚úÖ get_employes_disponibles_poste(poste, date)');
  console.log('');
  console.log('üì¶ MIGRATION AUTOMATIQUE:');
  console.log('   ‚úÖ Employ√©s existants');
  console.log('   ‚úÖ Horaires (disponibilit√©s)');
  console.log('   ‚úÖ Comp√©tences');
  console.log('   ‚úÖ Absences');
  console.log('');
  console.log('üõ°Ô∏è  S√âCURIT√â:');
  console.log('   ‚úÖ Sauvegarde automatique des donn√©es');
  console.log('   ‚úÖ RLS activ√© sur les nouvelles tables');
  console.log('   ‚úÖ Anciennes tables pr√©serv√©es');
  console.log('');
  
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('');
  console.log('‚è∞ √âTAPES APR√àS EX√âCUTION:');
  console.log('');
  console.log('1. V√©rifiez que la migration s\'est bien pass√©e:');
  console.log('   SELECT COUNT(*) FROM employes_cuisine_unifie;');
  console.log('');
  console.log('2. Testez les nouvelles vues:');
  console.log('   SELECT * FROM absences_aujourd_hui;');
  console.log('   SELECT * FROM planning_aujourd_hui;');
  console.log('');
  console.log('3. Consultez le guide complet:');
  console.log('   üëâ GUIDE_MIGRATION_CUISINE.md');
  console.log('');
  console.log('üéâ Bonne migration !');
  
  // Nettoyer le fichier temporaire apr√®s 5 minutes
  setTimeout(() => {
    try {
      fs.unlinkSync(tempFile);
      console.log('\nüßπ Fichier temporaire supprim√© automatiquement');
    } catch (err) {
      // Ignorer l'erreur si le fichier n'existe plus
    }
  }, 5 * 60 * 1000);
}

// Point d'entr√©e
if (require.main === module) {
  executer().catch(console.error);
}

module.exports = { executer }; 