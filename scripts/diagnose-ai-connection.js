#!/usr/bin/env node

/**
 * üîç DIAGNOSTIC CONNEXION IA CADDY
 * Script pour identifier les probl√®mes de configuration et de connectivit√©
 */

import dotenv from 'dotenv';
// Utiliser fetch natif de Node.js 18+
const fetch = globalThis.fetch;

// Charger les variables d'environnement
dotenv.config();

const diagnostics = {
  openai: {
    name: 'OpenAI Standard',
    key: process.env.REACT_APP_OPENAI_API_KEY,
    configured: false,
    connected: false,
    error: null
  },
  azure: {
    name: 'Azure OpenAI',
    endpoint: process.env.REACT_APP_AZURE_OPENAI_ENDPOINT,
    key: process.env.REACT_APP_AZURE_OPENAI_API_KEY,
    deployment: process.env.REACT_APP_AZURE_OPENAI_DEPLOYMENT_NAME,
    configured: false,
    connected: false,
    error: null
  }
};

console.log('üîç DIAGNOSTIC IA CADDY - D√âBUT\n');

// 1. V√©rifier la configuration OpenAI
console.log('üìã 1. V√âRIFICATION CONFIGURATION\n');

if (diagnostics.openai.key) {
  diagnostics.openai.configured = true;
  console.log('‚úÖ OpenAI configur√©');
  console.log(`   Cl√©: ${diagnostics.openai.key.substring(0, 8)}...`);
} else {
  console.log('‚ùå OpenAI non configur√© - variable REACT_APP_OPENAI_API_KEY manquante');
}

if (diagnostics.azure.endpoint && diagnostics.azure.key && diagnostics.azure.deployment) {
  diagnostics.azure.configured = true;
  console.log('‚úÖ Azure OpenAI configur√©');
  console.log(`   Endpoint: ${diagnostics.azure.endpoint}`);
  console.log(`   Deployment: ${diagnostics.azure.deployment}`);
  console.log(`   Cl√©: ${diagnostics.azure.key.substring(0, 8)}...`);
} else {
  console.log('‚ùå Azure OpenAI non configur√©');
  if (!diagnostics.azure.endpoint) console.log('   - REACT_APP_AZURE_OPENAI_ENDPOINT manquant');
  if (!diagnostics.azure.key) console.log('   - REACT_APP_AZURE_OPENAI_API_KEY manquant');
  if (!diagnostics.azure.deployment) console.log('   - REACT_APP_AZURE_OPENAI_DEPLOYMENT_NAME manquant');
}

// 2. Tester la connectivit√©
console.log('\nüåê 2. TEST DE CONNECTIVIT√â\n');

// Test OpenAI
if (diagnostics.openai.configured) {
  try {
    console.log('üöÄ Test OpenAI...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${diagnostics.openai.key}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [{ role: 'user', content: 'Test' }],
        max_tokens: 10
      })
    });
    
    if (response.ok) {
      diagnostics.openai.connected = true;
      console.log('‚úÖ OpenAI connect√© et fonctionnel');
    } else {
      const errorText = await response.text();
      diagnostics.openai.error = `HTTP ${response.status}: ${errorText}`;
      console.log(`‚ùå OpenAI erreur: ${diagnostics.openai.error}`);
    }
  } catch (error) {
    diagnostics.openai.error = error.message;
    console.log(`‚ùå OpenAI erreur r√©seau: ${error.message}`);
  }
}

// Test Azure OpenAI
if (diagnostics.azure.configured) {
  try {
    console.log('üöÄ Test Azure OpenAI...');
    const url = `${diagnostics.azure.endpoint.replace(/\/+$/, '')}/openai/deployments/${diagnostics.azure.deployment}/chat/completions?api-version=2024-02-15-preview`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'api-key': diagnostics.azure.key
      },
      body: JSON.stringify({
        messages: [{ role: 'user', content: 'Test' }],
        max_tokens: 10
      })
    });
    
    if (response.ok) {
      diagnostics.azure.connected = true;
      console.log('‚úÖ Azure OpenAI connect√© et fonctionnel');
    } else {
      const errorText = await response.text();
      diagnostics.azure.error = `HTTP ${response.status}: ${errorText}`;
      console.log(`‚ùå Azure OpenAI erreur: ${diagnostics.azure.error}`);
    }
  } catch (error) {
    diagnostics.azure.error = error.message;
    console.log(`‚ùå Azure OpenAI erreur r√©seau: ${error.message}`);
  }
}

// 3. R√©sum√© et recommandations
console.log('\nüìä 3. R√âSUM√â ET RECOMMANDATIONS\n');

const hasWorkingIA = diagnostics.openai.connected || diagnostics.azure.connected;

if (hasWorkingIA) {
  console.log('üéâ Au moins une IA fonctionne correctement !');
  if (diagnostics.openai.connected) {
    console.log('‚úÖ OpenAI op√©rationnel (recommand√© pour simplicit√©)');
  }
  if (diagnostics.azure.connected) {
    console.log('‚úÖ Azure OpenAI op√©rationnel');
  }
} else {
  console.log('‚ö†Ô∏è  AUCUNE IA FONCTIONNELLE D√âTECT√âE');
  console.log('\nüîß ACTIONS RECOMMAND√âES:');
  
  if (!diagnostics.openai.configured && !diagnostics.azure.configured) {
    console.log('1. Configurez au moins une IA dans votre fichier .env');
    console.log('2. Pour OpenAI (recommand√©):');
    console.log('   REACT_APP_OPENAI_API_KEY=sk-votre_cle_ici');
    console.log('3. Ou pour Azure OpenAI:');
    console.log('   REACT_APP_AZURE_OPENAI_ENDPOINT=https://votre-service.openai.azure.com');
    console.log('   REACT_APP_AZURE_OPENAI_API_KEY=votre_cle');
    console.log('   REACT_APP_AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4o-mini');
  } else {
    if (diagnostics.openai.configured && !diagnostics.openai.connected) {
      console.log('1. V√©rifiez votre cl√© OpenAI');
      console.log('2. V√©rifiez votre connexion internet');
      console.log(`   Erreur: ${diagnostics.openai.error}`);
    }
    if (diagnostics.azure.configured && !diagnostics.azure.connected) {
      console.log('1. V√©rifiez votre configuration Azure OpenAI');
      console.log('2. V√©rifiez que le deployment existe');
      console.log(`   Erreur: ${diagnostics.azure.error}`);
    }
  }
  
  console.log('\nüí° EN ATTENDANT:');
  console.log('‚Ä¢ Le syst√®me utilisera le fallback manuel');
  console.log('‚Ä¢ Les plannings seront g√©n√©r√©s par r√®gles m√©tier');
  console.log('‚Ä¢ Fonctionnalit√© limit√©e mais op√©rationnelle');
}

console.log('\nüîç DIAGNOSTIC IA CADDY - FIN'); 