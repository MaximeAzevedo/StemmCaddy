require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testAbsencesCuisineSetup() {
  console.log('üß™ Test et configuration de la table absences_cuisine...');
  console.log('');
  
  try {
    // Test 1: V√©rifier si la table existe d√©j√†
    console.log('1Ô∏è‚É£ V√©rification de l\'existence de la table...');
    const { data, error } = await supabase
      .from('absences_cuisine')
      .select('*')
      .limit(1);
    
    if (error && error.code === '42P01') {
      console.log('‚ùå Table absences_cuisine n\'existe pas');
      console.log('');
      console.log('üìã INSTRUCTIONS POUR CR√âER LA TABLE :');
      console.log('1. Allez sur https://supabase.com/dashboard');
      console.log('2. Ouvrez votre projet Caddy');
      console.log('3. Allez dans "SQL Editor"');
      console.log('4. Cr√©ez une nouvelle requ√™te et copiez-collez le SQL suivant :');
      console.log('');
      console.log('-- D√âBUT DU SCRIPT SQL --');
      console.log(`
-- Table des absences pour les employ√©s cuisine
CREATE TABLE absences_cuisine (
  id SERIAL PRIMARY KEY,
  employee_id INTEGER REFERENCES employees(id) ON DELETE CASCADE,
  date_debut DATE NOT NULL,
  date_fin DATE NOT NULL,
  type_absence VARCHAR(50) DEFAULT 'Absent' CHECK (type_absence IN ('Absent', 'Cong√©', 'Maladie', 'Formation', 'Accident')),
  statut VARCHAR(20) DEFAULT 'Confirm√©e' CHECK (statut IN ('Confirm√©e', 'En attente', 'Annul√©e')),
  motif TEXT,
  remplacant_id INTEGER REFERENCES employees(id),
  created_by INTEGER REFERENCES employees(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CHECK (date_fin >= date_debut)
);

-- Index pour optimiser les requ√™tes
CREATE INDEX idx_absences_cuisine_employee_id ON absences_cuisine(employee_id);
CREATE INDEX idx_absences_cuisine_dates ON absences_cuisine(date_debut, date_fin);
CREATE INDEX idx_absences_cuisine_statut ON absences_cuisine(statut);

-- Politique RLS pour permettre l'acc√®s public
ALTER TABLE absences_cuisine ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Acc√®s public absences cuisine" ON absences_cuisine FOR ALL USING (true);

-- Donn√©es de test
INSERT INTO absences_cuisine (employee_id, date_debut, date_fin, type_absence, motif) 
SELECT employee_id, '2024-01-15', '2024-01-15', 'Maladie', 'Test - Grippe'
FROM employees_cuisine LIMIT 1;

INSERT INTO absences_cuisine (employee_id, date_debut, date_fin, type_absence, motif) 
SELECT employee_id, '2024-01-20', '2024-01-22', 'Cong√©', 'Test - Cong√©s personnels'
FROM employees_cuisine LIMIT 1 OFFSET 1;
      `);
      console.log('-- FIN DU SCRIPT SQL --');
      console.log('');
      console.log('5. Cliquez sur "Run" pour ex√©cuter le script');
      console.log('6. Puis relancez ce script pour v√©rifier : node scripts/create-absences-cuisine-table-simple.js');
      
      return false;
    } else if (error) {
      console.error('‚ùå Erreur inattendue:', error);
      return false;
    } else {
      console.log('‚úÖ Table absences_cuisine existe et est accessible');
      console.log(`üìä ${data?.length || 0} enregistrements trouv√©s`);
    }
    
    // Test 2: V√©rifier les employ√©s cuisine
    console.log('');
    console.log('2Ô∏è‚É£ V√©rification des employ√©s cuisine...');
    const { data: employeesData, error: empError } = await supabase
      .from('employees_cuisine')
      .select(`
        employee_id,
        employee:employees(nom, prenom)
      `)
      .limit(5);
    
    if (empError) {
      console.error('‚ùå Erreur employ√©s cuisine:', empError);
    } else {
      console.log(`‚úÖ ${employeesData.length} employ√©s cuisine disponibles pour les tests`);
      employeesData.forEach(ec => {
        console.log(`   ‚Ä¢ ${ec.employee.nom} ${ec.employee.prenom} (ID: ${ec.employee_id})`);
      });
    }
    
    // Test 3: Test de cr√©ation d'absence
    console.log('');
    console.log('3Ô∏è‚É£ Test de cr√©ation d\'absence...');
    
    if (employeesData && employeesData.length > 0) {
      const testAbsence = {
        employee_id: employeesData[0].employee_id,
        date_debut: new Date().toISOString().split('T')[0],
        date_fin: new Date().toISOString().split('T')[0],
        type_absence: 'Absent',
        statut: 'Confirm√©e',
        motif: 'Test automatique - Script de validation'
      };
      
      const { data: createdAbsence, error: createError } = await supabase
        .from('absences_cuisine')
        .insert([testAbsence])
        .select()
        .single();
      
      if (createError) {
        console.error('‚ùå Erreur cr√©ation:', createError);
      } else {
        console.log('‚úÖ Absence cr√©√©e avec succ√®s');
        console.log(`   ID: ${createdAbsence.id}, Employ√©: ${employeesData[0].employee.nom}`);
        
        // Test 4: Suppression de l'absence de test
        console.log('');
        console.log('4Ô∏è‚É£ Nettoyage de l\'absence de test...');
        const { error: deleteError } = await supabase
          .from('absences_cuisine')
          .delete()
          .eq('id', createdAbsence.id);
        
        if (deleteError) {
          console.error('‚ùå Erreur suppression:', deleteError);
        } else {
          console.log('‚úÖ Absence de test supprim√©e');
        }
      }
    }
    
    // Test 5: Test de jointure avec employees
    console.log('');
    console.log('5Ô∏è‚É£ Test jointure avec les employ√©s...');
    const { data: joinData, error: joinError } = await supabase
      .from('absences_cuisine')
      .select(`
        *,
        employee:employees(nom, prenom, profil)
      `)
      .limit(3);
    
    if (joinError) {
      console.error('‚ùå Erreur jointure:', joinError);
      console.log('‚ÑπÔ∏è L\'application utilisera le mode fallback sans jointure');
    } else {
      console.log('‚úÖ Jointures fonctionnent correctement');
      console.log(`üìä ${joinData.length} absences avec informations employ√©`);
    }
    
    console.log('');
    console.log('üéâ Configuration valid√©e !');
    console.log('üìã L\'onglet Absences dans le module Cuisine est pr√™t √† √™tre utilis√©');
    console.log('üîß Pour tester : npm start puis allez dans Cuisine > Absences');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur critique:', error);
    return false;
  }
}

// Test de l'API compl√®te
async function testFullAPI() {
  console.log('');
  console.log('üî¨ Test complet de l\'API absences cuisine...');
  
  const operations = [
    {
      name: 'R√©cup√©ration simple',
      test: () => supabase.from('absences_cuisine').select('*').limit(5)
    },
    {
      name: 'R√©cup√©ration avec jointure',
      test: () => supabase.from('absences_cuisine').select(`
        *,
        employee:employees(nom, prenom, profil)
      `).limit(3)
    },
    {
      name: 'Filtrage par statut',
      test: () => supabase.from('absences_cuisine').select('*').eq('statut', 'Confirm√©e')
    },
    {
      name: 'Filtrage par dates',
      test: () => supabase.from('absences_cuisine').select('*')
        .gte('date_debut', '2024-01-01')
        .lte('date_fin', '2024-12-31')
    }
  ];
  
  for (const op of operations) {
    try {
      const { data, error } = await op.test();
      if (error) {
        console.log(`‚ùå ${op.name}: ${error.message}`);
      } else {
        console.log(`‚úÖ ${op.name}: ${data.length} r√©sultats`);
      }
    } catch (err) {
      console.log(`üí• ${op.name}: Erreur critique`);
    }
  }
}

async function main() {
  const success = await testAbsencesCuisineSetup();
  
  if (success) {
    await testFullAPI();
  }
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testAbsencesCuisineSetup }; 